
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Funcionario
 * 
 */
export type Funcionario = {
  funcionario_id: number
  nome_funcionario: string
  cargo: string
  telefone: string
  email: string
  endereco: string
}

/**
 * Model Cliente
 * 
 */
export type Cliente = {
  cliente_id: number
  nome: string
  telefone: string
  email: string
  endereco: string
}

/**
 * Model Pedido
 * 
 */
export type Pedido = {
  pedido_id: number
  data_pedido: Date
  valor_total: number
  cliente_id: number
  funcionario_id: number
}

/**
 * Model Item_Pedido
 * 
 */
export type Item_Pedido = {
  item_pedido_id: number
  data_pedido: Date
  valor_total: number
  produto_id: number
  pedido_id: number
}

/**
 * Model Produto
 * 
 */
export type Produto = {
  produto_id: number
  nome_produto: string
  descricao: string
  preco: number
  categoria_id: number
  fornecedor_id: number
}

/**
 * Model Fornecedor
 * 
 */
export type Fornecedor = {
  fornecedor_id: number
  nome_fornecedor: string
  telefone: string
  email: string
  endereco: string
}

/**
 * Model Categoria_Produto
 * 
 */
export type Categoria_Produto = {
  categoria_id: number
  nome_categoria: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Funcionarios
 * const funcionarios = await prisma.funcionario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Funcionarios
   * const funcionarios = await prisma.funcionario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.funcionario`: Exposes CRUD operations for the **Funcionario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funcionarios
    * const funcionarios = await prisma.funcionario.findMany()
    * ```
    */
  get funcionario(): Prisma.FuncionarioDelegate<GlobalReject>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<GlobalReject>;

  /**
   * `prisma.pedido`: Exposes CRUD operations for the **Pedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedido.findMany()
    * ```
    */
  get pedido(): Prisma.PedidoDelegate<GlobalReject>;

  /**
   * `prisma.item_Pedido`: Exposes CRUD operations for the **Item_Pedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Item_Pedidos
    * const item_Pedidos = await prisma.item_Pedido.findMany()
    * ```
    */
  get item_Pedido(): Prisma.Item_PedidoDelegate<GlobalReject>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<GlobalReject>;

  /**
   * `prisma.fornecedor`: Exposes CRUD operations for the **Fornecedor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fornecedors
    * const fornecedors = await prisma.fornecedor.findMany()
    * ```
    */
  get fornecedor(): Prisma.FornecedorDelegate<GlobalReject>;

  /**
   * `prisma.categoria_Produto`: Exposes CRUD operations for the **Categoria_Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categoria_Produtos
    * const categoria_Produtos = await prisma.categoria_Produto.findMany()
    * ```
    */
  get categoria_Produto(): Prisma.Categoria_ProdutoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Funcionario: 'Funcionario',
    Cliente: 'Cliente',
    Pedido: 'Pedido',
    Item_Pedido: 'Item_Pedido',
    Produto: 'Produto',
    Fornecedor: 'Fornecedor',
    Categoria_Produto: 'Categoria_Produto'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FuncionarioCountOutputType
   */


  export type FuncionarioCountOutputType = {
    pedidos: number
  }

  export type FuncionarioCountOutputTypeSelect = {
    pedidos?: boolean
  }

  export type FuncionarioCountOutputTypeGetPayload<S extends boolean | null | undefined | FuncionarioCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FuncionarioCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FuncionarioCountOutputTypeArgs)
    ? FuncionarioCountOutputType 
    : S extends { select: any } & (FuncionarioCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FuncionarioCountOutputType ? FuncionarioCountOutputType[P] : never
  } 
      : FuncionarioCountOutputType




  // Custom InputTypes

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FuncionarioCountOutputType
     * 
    **/
    select?: FuncionarioCountOutputTypeSelect | null
  }



  /**
   * Count Type ClienteCountOutputType
   */


  export type ClienteCountOutputType = {
    pedidos: number
  }

  export type ClienteCountOutputTypeSelect = {
    pedidos?: boolean
  }

  export type ClienteCountOutputTypeGetPayload<S extends boolean | null | undefined | ClienteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClienteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClienteCountOutputTypeArgs)
    ? ClienteCountOutputType 
    : S extends { select: any } & (ClienteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClienteCountOutputType ? ClienteCountOutputType[P] : never
  } 
      : ClienteCountOutputType




  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     * 
    **/
    select?: ClienteCountOutputTypeSelect | null
  }



  /**
   * Count Type PedidoCountOutputType
   */


  export type PedidoCountOutputType = {
    itens_pedido: number
  }

  export type PedidoCountOutputTypeSelect = {
    itens_pedido?: boolean
  }

  export type PedidoCountOutputTypeGetPayload<S extends boolean | null | undefined | PedidoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PedidoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PedidoCountOutputTypeArgs)
    ? PedidoCountOutputType 
    : S extends { select: any } & (PedidoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PedidoCountOutputType ? PedidoCountOutputType[P] : never
  } 
      : PedidoCountOutputType




  // Custom InputTypes

  /**
   * PedidoCountOutputType without action
   */
  export type PedidoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PedidoCountOutputType
     * 
    **/
    select?: PedidoCountOutputTypeSelect | null
  }



  /**
   * Count Type ProdutoCountOutputType
   */


  export type ProdutoCountOutputType = {
    itens_pedido: number
  }

  export type ProdutoCountOutputTypeSelect = {
    itens_pedido?: boolean
  }

  export type ProdutoCountOutputTypeGetPayload<S extends boolean | null | undefined | ProdutoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProdutoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProdutoCountOutputTypeArgs)
    ? ProdutoCountOutputType 
    : S extends { select: any } & (ProdutoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProdutoCountOutputType ? ProdutoCountOutputType[P] : never
  } 
      : ProdutoCountOutputType




  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     * 
    **/
    select?: ProdutoCountOutputTypeSelect | null
  }



  /**
   * Count Type FornecedorCountOutputType
   */


  export type FornecedorCountOutputType = {
    produtos: number
  }

  export type FornecedorCountOutputTypeSelect = {
    produtos?: boolean
  }

  export type FornecedorCountOutputTypeGetPayload<S extends boolean | null | undefined | FornecedorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FornecedorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FornecedorCountOutputTypeArgs)
    ? FornecedorCountOutputType 
    : S extends { select: any } & (FornecedorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FornecedorCountOutputType ? FornecedorCountOutputType[P] : never
  } 
      : FornecedorCountOutputType




  // Custom InputTypes

  /**
   * FornecedorCountOutputType without action
   */
  export type FornecedorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FornecedorCountOutputType
     * 
    **/
    select?: FornecedorCountOutputTypeSelect | null
  }



  /**
   * Count Type Categoria_ProdutoCountOutputType
   */


  export type Categoria_ProdutoCountOutputType = {
    produtos: number
  }

  export type Categoria_ProdutoCountOutputTypeSelect = {
    produtos?: boolean
  }

  export type Categoria_ProdutoCountOutputTypeGetPayload<S extends boolean | null | undefined | Categoria_ProdutoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Categoria_ProdutoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Categoria_ProdutoCountOutputTypeArgs)
    ? Categoria_ProdutoCountOutputType 
    : S extends { select: any } & (Categoria_ProdutoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Categoria_ProdutoCountOutputType ? Categoria_ProdutoCountOutputType[P] : never
  } 
      : Categoria_ProdutoCountOutputType




  // Custom InputTypes

  /**
   * Categoria_ProdutoCountOutputType without action
   */
  export type Categoria_ProdutoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Categoria_ProdutoCountOutputType
     * 
    **/
    select?: Categoria_ProdutoCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Funcionario
   */


  export type AggregateFuncionario = {
    _count: FuncionarioCountAggregateOutputType | null
    _avg: FuncionarioAvgAggregateOutputType | null
    _sum: FuncionarioSumAggregateOutputType | null
    _min: FuncionarioMinAggregateOutputType | null
    _max: FuncionarioMaxAggregateOutputType | null
  }

  export type FuncionarioAvgAggregateOutputType = {
    funcionario_id: number | null
  }

  export type FuncionarioSumAggregateOutputType = {
    funcionario_id: number | null
  }

  export type FuncionarioMinAggregateOutputType = {
    funcionario_id: number | null
    nome_funcionario: string | null
    cargo: string | null
    telefone: string | null
    email: string | null
    endereco: string | null
  }

  export type FuncionarioMaxAggregateOutputType = {
    funcionario_id: number | null
    nome_funcionario: string | null
    cargo: string | null
    telefone: string | null
    email: string | null
    endereco: string | null
  }

  export type FuncionarioCountAggregateOutputType = {
    funcionario_id: number
    nome_funcionario: number
    cargo: number
    telefone: number
    email: number
    endereco: number
    _all: number
  }


  export type FuncionarioAvgAggregateInputType = {
    funcionario_id?: true
  }

  export type FuncionarioSumAggregateInputType = {
    funcionario_id?: true
  }

  export type FuncionarioMinAggregateInputType = {
    funcionario_id?: true
    nome_funcionario?: true
    cargo?: true
    telefone?: true
    email?: true
    endereco?: true
  }

  export type FuncionarioMaxAggregateInputType = {
    funcionario_id?: true
    nome_funcionario?: true
    cargo?: true
    telefone?: true
    email?: true
    endereco?: true
  }

  export type FuncionarioCountAggregateInputType = {
    funcionario_id?: true
    nome_funcionario?: true
    cargo?: true
    telefone?: true
    email?: true
    endereco?: true
    _all?: true
  }

  export type FuncionarioAggregateArgs = {
    /**
     * Filter which Funcionario to aggregate.
     * 
    **/
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     * 
    **/
    orderBy?: Enumerable<FuncionarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funcionarios
    **/
    _count?: true | FuncionarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuncionarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuncionarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuncionarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuncionarioMaxAggregateInputType
  }

  export type GetFuncionarioAggregateType<T extends FuncionarioAggregateArgs> = {
        [P in keyof T & keyof AggregateFuncionario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuncionario[P]>
      : GetScalarType<T[P], AggregateFuncionario[P]>
  }




  export type FuncionarioGroupByArgs = {
    where?: FuncionarioWhereInput
    orderBy?: Enumerable<FuncionarioOrderByWithAggregationInput>
    by: Array<FuncionarioScalarFieldEnum>
    having?: FuncionarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuncionarioCountAggregateInputType | true
    _avg?: FuncionarioAvgAggregateInputType
    _sum?: FuncionarioSumAggregateInputType
    _min?: FuncionarioMinAggregateInputType
    _max?: FuncionarioMaxAggregateInputType
  }


  export type FuncionarioGroupByOutputType = {
    funcionario_id: number
    nome_funcionario: string
    cargo: string
    telefone: string
    email: string
    endereco: string
    _count: FuncionarioCountAggregateOutputType | null
    _avg: FuncionarioAvgAggregateOutputType | null
    _sum: FuncionarioSumAggregateOutputType | null
    _min: FuncionarioMinAggregateOutputType | null
    _max: FuncionarioMaxAggregateOutputType | null
  }

  type GetFuncionarioGroupByPayload<T extends FuncionarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FuncionarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuncionarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuncionarioGroupByOutputType[P]>
            : GetScalarType<T[P], FuncionarioGroupByOutputType[P]>
        }
      >
    >


  export type FuncionarioSelect = {
    funcionario_id?: boolean
    nome_funcionario?: boolean
    cargo?: boolean
    telefone?: boolean
    email?: boolean
    endereco?: boolean
    pedidos?: boolean | FuncionarioPedidosArgs
    _count?: boolean | FuncionarioCountOutputTypeArgs
  }


  export type FuncionarioInclude = {
    pedidos?: boolean | FuncionarioPedidosArgs
    _count?: boolean | FuncionarioCountOutputTypeArgs
  } 

  export type FuncionarioGetPayload<S extends boolean | null | undefined | FuncionarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Funcionario :
    S extends undefined ? never :
    S extends { include: any } & (FuncionarioArgs | FuncionarioFindManyArgs)
    ? Funcionario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['include'][P]>>  :
        P extends '_count' ? FuncionarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FuncionarioArgs | FuncionarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['select'][P]>>  :
        P extends '_count' ? FuncionarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Funcionario ? Funcionario[P] : never
  } 
      : Funcionario


  type FuncionarioCountArgs = Merge<
    Omit<FuncionarioFindManyArgs, 'select' | 'include'> & {
      select?: FuncionarioCountAggregateInputType | true
    }
  >

  export interface FuncionarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Funcionario that matches the filter.
     * @param {FuncionarioFindUniqueArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FuncionarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FuncionarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Funcionario'> extends True ? Prisma__FuncionarioClient<FuncionarioGetPayload<T>> : Prisma__FuncionarioClient<FuncionarioGetPayload<T> | null, null>

    /**
     * Find one Funcionario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FuncionarioFindUniqueOrThrowArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FuncionarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FuncionarioFindUniqueOrThrowArgs>
    ): Prisma__FuncionarioClient<FuncionarioGetPayload<T>>

    /**
     * Find the first Funcionario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindFirstArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FuncionarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FuncionarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Funcionario'> extends True ? Prisma__FuncionarioClient<FuncionarioGetPayload<T>> : Prisma__FuncionarioClient<FuncionarioGetPayload<T> | null, null>

    /**
     * Find the first Funcionario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindFirstOrThrowArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FuncionarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FuncionarioFindFirstOrThrowArgs>
    ): Prisma__FuncionarioClient<FuncionarioGetPayload<T>>

    /**
     * Find zero or more Funcionarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funcionarios
     * const funcionarios = await prisma.funcionario.findMany()
     * 
     * // Get first 10 Funcionarios
     * const funcionarios = await prisma.funcionario.findMany({ take: 10 })
     * 
     * // Only select the `funcionario_id`
     * const funcionarioWithFuncionario_idOnly = await prisma.funcionario.findMany({ select: { funcionario_id: true } })
     * 
    **/
    findMany<T extends FuncionarioFindManyArgs>(
      args?: SelectSubset<T, FuncionarioFindManyArgs>
    ): PrismaPromise<Array<FuncionarioGetPayload<T>>>

    /**
     * Create a Funcionario.
     * @param {FuncionarioCreateArgs} args - Arguments to create a Funcionario.
     * @example
     * // Create one Funcionario
     * const Funcionario = await prisma.funcionario.create({
     *   data: {
     *     // ... data to create a Funcionario
     *   }
     * })
     * 
    **/
    create<T extends FuncionarioCreateArgs>(
      args: SelectSubset<T, FuncionarioCreateArgs>
    ): Prisma__FuncionarioClient<FuncionarioGetPayload<T>>

    /**
     * Create many Funcionarios.
     *     @param {FuncionarioCreateManyArgs} args - Arguments to create many Funcionarios.
     *     @example
     *     // Create many Funcionarios
     *     const funcionario = await prisma.funcionario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FuncionarioCreateManyArgs>(
      args?: SelectSubset<T, FuncionarioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Funcionario.
     * @param {FuncionarioDeleteArgs} args - Arguments to delete one Funcionario.
     * @example
     * // Delete one Funcionario
     * const Funcionario = await prisma.funcionario.delete({
     *   where: {
     *     // ... filter to delete one Funcionario
     *   }
     * })
     * 
    **/
    delete<T extends FuncionarioDeleteArgs>(
      args: SelectSubset<T, FuncionarioDeleteArgs>
    ): Prisma__FuncionarioClient<FuncionarioGetPayload<T>>

    /**
     * Update one Funcionario.
     * @param {FuncionarioUpdateArgs} args - Arguments to update one Funcionario.
     * @example
     * // Update one Funcionario
     * const funcionario = await prisma.funcionario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FuncionarioUpdateArgs>(
      args: SelectSubset<T, FuncionarioUpdateArgs>
    ): Prisma__FuncionarioClient<FuncionarioGetPayload<T>>

    /**
     * Delete zero or more Funcionarios.
     * @param {FuncionarioDeleteManyArgs} args - Arguments to filter Funcionarios to delete.
     * @example
     * // Delete a few Funcionarios
     * const { count } = await prisma.funcionario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FuncionarioDeleteManyArgs>(
      args?: SelectSubset<T, FuncionarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funcionarios
     * const funcionario = await prisma.funcionario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FuncionarioUpdateManyArgs>(
      args: SelectSubset<T, FuncionarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Funcionario.
     * @param {FuncionarioUpsertArgs} args - Arguments to update or create a Funcionario.
     * @example
     * // Update or create a Funcionario
     * const funcionario = await prisma.funcionario.upsert({
     *   create: {
     *     // ... data to create a Funcionario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funcionario we want to update
     *   }
     * })
    **/
    upsert<T extends FuncionarioUpsertArgs>(
      args: SelectSubset<T, FuncionarioUpsertArgs>
    ): Prisma__FuncionarioClient<FuncionarioGetPayload<T>>

    /**
     * Count the number of Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioCountArgs} args - Arguments to filter Funcionarios to count.
     * @example
     * // Count the number of Funcionarios
     * const count = await prisma.funcionario.count({
     *   where: {
     *     // ... the filter for the Funcionarios we want to count
     *   }
     * })
    **/
    count<T extends FuncionarioCountArgs>(
      args?: Subset<T, FuncionarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuncionarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funcionario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuncionarioAggregateArgs>(args: Subset<T, FuncionarioAggregateArgs>): PrismaPromise<GetFuncionarioAggregateType<T>>

    /**
     * Group by Funcionario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuncionarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuncionarioGroupByArgs['orderBy'] }
        : { orderBy?: FuncionarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuncionarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncionarioGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Funcionario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FuncionarioClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    pedidos<T extends FuncionarioPedidosArgs= {}>(args?: Subset<T, FuncionarioPedidosArgs>): PrismaPromise<Array<PedidoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Funcionario base type for findUnique actions
   */
  export type FuncionarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * Filter, which Funcionario to fetch.
     * 
    **/
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario findUnique
   */
  export interface FuncionarioFindUniqueArgs extends FuncionarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Funcionario findUniqueOrThrow
   */
  export type FuncionarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * Filter, which Funcionario to fetch.
     * 
    **/
    where: FuncionarioWhereUniqueInput
  }


  /**
   * Funcionario base type for findFirst actions
   */
  export type FuncionarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * Filter, which Funcionario to fetch.
     * 
    **/
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     * 
    **/
    orderBy?: Enumerable<FuncionarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     * 
    **/
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     * 
    **/
    distinct?: Enumerable<FuncionarioScalarFieldEnum>
  }

  /**
   * Funcionario findFirst
   */
  export interface FuncionarioFindFirstArgs extends FuncionarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Funcionario findFirstOrThrow
   */
  export type FuncionarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * Filter, which Funcionario to fetch.
     * 
    **/
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     * 
    **/
    orderBy?: Enumerable<FuncionarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     * 
    **/
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     * 
    **/
    distinct?: Enumerable<FuncionarioScalarFieldEnum>
  }


  /**
   * Funcionario findMany
   */
  export type FuncionarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * Filter, which Funcionarios to fetch.
     * 
    **/
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     * 
    **/
    orderBy?: Enumerable<FuncionarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funcionarios.
     * 
    **/
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FuncionarioScalarFieldEnum>
  }


  /**
   * Funcionario create
   */
  export type FuncionarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * The data needed to create a Funcionario.
     * 
    **/
    data: XOR<FuncionarioCreateInput, FuncionarioUncheckedCreateInput>
  }


  /**
   * Funcionario createMany
   */
  export type FuncionarioCreateManyArgs = {
    /**
     * The data used to create many Funcionarios.
     * 
    **/
    data: Enumerable<FuncionarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Funcionario update
   */
  export type FuncionarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * The data needed to update a Funcionario.
     * 
    **/
    data: XOR<FuncionarioUpdateInput, FuncionarioUncheckedUpdateInput>
    /**
     * Choose, which Funcionario to update.
     * 
    **/
    where: FuncionarioWhereUniqueInput
  }


  /**
   * Funcionario updateMany
   */
  export type FuncionarioUpdateManyArgs = {
    /**
     * The data used to update Funcionarios.
     * 
    **/
    data: XOR<FuncionarioUpdateManyMutationInput, FuncionarioUncheckedUpdateManyInput>
    /**
     * Filter which Funcionarios to update
     * 
    **/
    where?: FuncionarioWhereInput
  }


  /**
   * Funcionario upsert
   */
  export type FuncionarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * The filter to search for the Funcionario to update in case it exists.
     * 
    **/
    where: FuncionarioWhereUniqueInput
    /**
     * In case the Funcionario found by the `where` argument doesn't exist, create a new Funcionario with this data.
     * 
    **/
    create: XOR<FuncionarioCreateInput, FuncionarioUncheckedCreateInput>
    /**
     * In case the Funcionario was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FuncionarioUpdateInput, FuncionarioUncheckedUpdateInput>
  }


  /**
   * Funcionario delete
   */
  export type FuncionarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
    /**
     * Filter which Funcionario to delete.
     * 
    **/
    where: FuncionarioWhereUniqueInput
  }


  /**
   * Funcionario deleteMany
   */
  export type FuncionarioDeleteManyArgs = {
    /**
     * Filter which Funcionarios to delete
     * 
    **/
    where?: FuncionarioWhereInput
  }


  /**
   * Funcionario.pedidos
   */
  export type FuncionarioPedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Funcionario without action
   */
  export type FuncionarioArgs = {
    /**
     * Select specific fields to fetch from the Funcionario
     * 
    **/
    select?: FuncionarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FuncionarioInclude | null
  }



  /**
   * Model Cliente
   */


  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    cliente_id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    cliente_id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    cliente_id: number | null
    nome: string | null
    telefone: string | null
    email: string | null
    endereco: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    cliente_id: number | null
    nome: string | null
    telefone: string | null
    email: string | null
    endereco: string | null
  }

  export type ClienteCountAggregateOutputType = {
    cliente_id: number
    nome: number
    telefone: number
    email: number
    endereco: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    cliente_id?: true
  }

  export type ClienteSumAggregateInputType = {
    cliente_id?: true
  }

  export type ClienteMinAggregateInputType = {
    cliente_id?: true
    nome?: true
    telefone?: true
    email?: true
    endereco?: true
  }

  export type ClienteMaxAggregateInputType = {
    cliente_id?: true
    nome?: true
    telefone?: true
    email?: true
    endereco?: true
  }

  export type ClienteCountAggregateInputType = {
    cliente_id?: true
    nome?: true
    telefone?: true
    email?: true
    endereco?: true
    _all?: true
  }

  export type ClienteAggregateArgs = {
    /**
     * Filter which Cliente to aggregate.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs = {
    where?: ClienteWhereInput
    orderBy?: Enumerable<ClienteOrderByWithAggregationInput>
    by: Array<ClienteScalarFieldEnum>
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }


  export type ClienteGroupByOutputType = {
    cliente_id: number
    nome: string
    telefone: string
    email: string
    endereco: string
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect = {
    cliente_id?: boolean
    nome?: boolean
    telefone?: boolean
    email?: boolean
    endereco?: boolean
    pedidos?: boolean | ClientePedidosArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }


  export type ClienteInclude = {
    pedidos?: boolean | ClientePedidosArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  } 

  export type ClienteGetPayload<S extends boolean | null | undefined | ClienteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Cliente :
    S extends undefined ? never :
    S extends { include: any } & (ClienteArgs | ClienteFindManyArgs)
    ? Cliente  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClienteArgs | ClienteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Cliente ? Cliente[P] : never
  } 
      : Cliente


  type ClienteCountArgs = Merge<
    Omit<ClienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }
  >

  export interface ClienteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClienteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cliente'> extends True ? Prisma__ClienteClient<ClienteGetPayload<T>> : Prisma__ClienteClient<ClienteGetPayload<T> | null, null>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClienteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cliente'> extends True ? Prisma__ClienteClient<ClienteGetPayload<T>> : Prisma__ClienteClient<ClienteGetPayload<T> | null, null>

    /**
     * Find the first Cliente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `cliente_id`
     * const clienteWithCliente_idOnly = await prisma.cliente.findMany({ select: { cliente_id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs>(
      args?: SelectSubset<T, ClienteFindManyArgs>
    ): PrismaPromise<Array<ClienteGetPayload<T>>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs>(
      args: SelectSubset<T, ClienteCreateArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs>(
      args?: SelectSubset<T, ClienteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs>(
      args: SelectSubset<T, ClienteDeleteArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs>(
      args: SelectSubset<T, ClienteUpdateArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs>(
      args?: SelectSubset<T, ClienteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs>(
      args: SelectSubset<T, ClienteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs>(
      args: SelectSubset<T, ClienteUpsertArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClienteClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    pedidos<T extends ClientePedidosArgs= {}>(args?: Subset<T, ClientePedidosArgs>): PrismaPromise<Array<PedidoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Cliente base type for findUnique actions
   */
  export type ClienteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUnique
   */
  export interface ClienteFindUniqueArgs extends ClienteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente base type for findFirst actions
   */
  export type ClienteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     * 
    **/
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }

  /**
   * Cliente findFirst
   */
  export interface ClienteFindFirstArgs extends ClienteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     * 
    **/
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Clientes to fetch.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * The data needed to create a Cliente.
     * 
    **/
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs = {
    /**
     * The data used to create many Clientes.
     * 
    **/
    data: Enumerable<ClienteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * The data needed to update a Cliente.
     * 
    **/
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     * 
    **/
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs = {
    /**
     * The data used to update Clientes.
     * 
    **/
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     * 
    **/
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     * 
    **/
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     * 
    **/
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter which Cliente to delete.
     * 
    **/
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs = {
    /**
     * Filter which Clientes to delete
     * 
    **/
    where?: ClienteWhereInput
  }


  /**
   * Cliente.pedidos
   */
  export type ClientePedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Cliente without action
   */
  export type ClienteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
  }



  /**
   * Model Pedido
   */


  export type AggregatePedido = {
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  export type PedidoAvgAggregateOutputType = {
    pedido_id: number | null
    valor_total: number | null
    cliente_id: number | null
    funcionario_id: number | null
  }

  export type PedidoSumAggregateOutputType = {
    pedido_id: number | null
    valor_total: number | null
    cliente_id: number | null
    funcionario_id: number | null
  }

  export type PedidoMinAggregateOutputType = {
    pedido_id: number | null
    data_pedido: Date | null
    valor_total: number | null
    cliente_id: number | null
    funcionario_id: number | null
  }

  export type PedidoMaxAggregateOutputType = {
    pedido_id: number | null
    data_pedido: Date | null
    valor_total: number | null
    cliente_id: number | null
    funcionario_id: number | null
  }

  export type PedidoCountAggregateOutputType = {
    pedido_id: number
    data_pedido: number
    valor_total: number
    cliente_id: number
    funcionario_id: number
    _all: number
  }


  export type PedidoAvgAggregateInputType = {
    pedido_id?: true
    valor_total?: true
    cliente_id?: true
    funcionario_id?: true
  }

  export type PedidoSumAggregateInputType = {
    pedido_id?: true
    valor_total?: true
    cliente_id?: true
    funcionario_id?: true
  }

  export type PedidoMinAggregateInputType = {
    pedido_id?: true
    data_pedido?: true
    valor_total?: true
    cliente_id?: true
    funcionario_id?: true
  }

  export type PedidoMaxAggregateInputType = {
    pedido_id?: true
    data_pedido?: true
    valor_total?: true
    cliente_id?: true
    funcionario_id?: true
  }

  export type PedidoCountAggregateInputType = {
    pedido_id?: true
    data_pedido?: true
    valor_total?: true
    cliente_id?: true
    funcionario_id?: true
    _all?: true
  }

  export type PedidoAggregateArgs = {
    /**
     * Filter which Pedido to aggregate.
     * 
    **/
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedidos
    **/
    _count?: true | PedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidoMaxAggregateInputType
  }

  export type GetPedidoAggregateType<T extends PedidoAggregateArgs> = {
        [P in keyof T & keyof AggregatePedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedido[P]>
      : GetScalarType<T[P], AggregatePedido[P]>
  }




  export type PedidoGroupByArgs = {
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithAggregationInput>
    by: Array<PedidoScalarFieldEnum>
    having?: PedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidoCountAggregateInputType | true
    _avg?: PedidoAvgAggregateInputType
    _sum?: PedidoSumAggregateInputType
    _min?: PedidoMinAggregateInputType
    _max?: PedidoMaxAggregateInputType
  }


  export type PedidoGroupByOutputType = {
    pedido_id: number
    data_pedido: Date
    valor_total: number
    cliente_id: number
    funcionario_id: number
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  type GetPedidoGroupByPayload<T extends PedidoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidoGroupByOutputType[P]>
            : GetScalarType<T[P], PedidoGroupByOutputType[P]>
        }
      >
    >


  export type PedidoSelect = {
    pedido_id?: boolean
    data_pedido?: boolean
    valor_total?: boolean
    cliente?: boolean | ClienteArgs
    cliente_id?: boolean
    funcionario?: boolean | FuncionarioArgs
    funcionario_id?: boolean
    itens_pedido?: boolean | PedidoItens_pedidoArgs
    _count?: boolean | PedidoCountOutputTypeArgs
  }


  export type PedidoInclude = {
    cliente?: boolean | ClienteArgs
    funcionario?: boolean | FuncionarioArgs
    itens_pedido?: boolean | PedidoItens_pedidoArgs
    _count?: boolean | PedidoCountOutputTypeArgs
  } 

  export type PedidoGetPayload<S extends boolean | null | undefined | PedidoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pedido :
    S extends undefined ? never :
    S extends { include: any } & (PedidoArgs | PedidoFindManyArgs)
    ? Pedido  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cliente' ? ClienteGetPayload<S['include'][P]> :
        P extends 'funcionario' ? FuncionarioGetPayload<S['include'][P]> :
        P extends 'itens_pedido' ? Array < Item_PedidoGetPayload<S['include'][P]>>  :
        P extends '_count' ? PedidoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PedidoArgs | PedidoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cliente' ? ClienteGetPayload<S['select'][P]> :
        P extends 'funcionario' ? FuncionarioGetPayload<S['select'][P]> :
        P extends 'itens_pedido' ? Array < Item_PedidoGetPayload<S['select'][P]>>  :
        P extends '_count' ? PedidoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Pedido ? Pedido[P] : never
  } 
      : Pedido


  type PedidoCountArgs = Merge<
    Omit<PedidoFindManyArgs, 'select' | 'include'> & {
      select?: PedidoCountAggregateInputType | true
    }
  >

  export interface PedidoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Pedido that matches the filter.
     * @param {PedidoFindUniqueArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PedidoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PedidoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pedido'> extends True ? Prisma__PedidoClient<PedidoGetPayload<T>> : Prisma__PedidoClient<PedidoGetPayload<T> | null, null>

    /**
     * Find one Pedido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PedidoFindUniqueOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PedidoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PedidoFindUniqueOrThrowArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Find the first Pedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PedidoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PedidoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pedido'> extends True ? Prisma__PedidoClient<PedidoGetPayload<T>> : Prisma__PedidoClient<PedidoGetPayload<T> | null, null>

    /**
     * Find the first Pedido that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PedidoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PedidoFindFirstOrThrowArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedido.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedido.findMany({ take: 10 })
     * 
     * // Only select the `pedido_id`
     * const pedidoWithPedido_idOnly = await prisma.pedido.findMany({ select: { pedido_id: true } })
     * 
    **/
    findMany<T extends PedidoFindManyArgs>(
      args?: SelectSubset<T, PedidoFindManyArgs>
    ): PrismaPromise<Array<PedidoGetPayload<T>>>

    /**
     * Create a Pedido.
     * @param {PedidoCreateArgs} args - Arguments to create a Pedido.
     * @example
     * // Create one Pedido
     * const Pedido = await prisma.pedido.create({
     *   data: {
     *     // ... data to create a Pedido
     *   }
     * })
     * 
    **/
    create<T extends PedidoCreateArgs>(
      args: SelectSubset<T, PedidoCreateArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Create many Pedidos.
     *     @param {PedidoCreateManyArgs} args - Arguments to create many Pedidos.
     *     @example
     *     // Create many Pedidos
     *     const pedido = await prisma.pedido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PedidoCreateManyArgs>(
      args?: SelectSubset<T, PedidoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pedido.
     * @param {PedidoDeleteArgs} args - Arguments to delete one Pedido.
     * @example
     * // Delete one Pedido
     * const Pedido = await prisma.pedido.delete({
     *   where: {
     *     // ... filter to delete one Pedido
     *   }
     * })
     * 
    **/
    delete<T extends PedidoDeleteArgs>(
      args: SelectSubset<T, PedidoDeleteArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Update one Pedido.
     * @param {PedidoUpdateArgs} args - Arguments to update one Pedido.
     * @example
     * // Update one Pedido
     * const pedido = await prisma.pedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PedidoUpdateArgs>(
      args: SelectSubset<T, PedidoUpdateArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Delete zero or more Pedidos.
     * @param {PedidoDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PedidoDeleteManyArgs>(
      args?: SelectSubset<T, PedidoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedido = await prisma.pedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PedidoUpdateManyArgs>(
      args: SelectSubset<T, PedidoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedido.
     * @param {PedidoUpsertArgs} args - Arguments to update or create a Pedido.
     * @example
     * // Update or create a Pedido
     * const pedido = await prisma.pedido.upsert({
     *   create: {
     *     // ... data to create a Pedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedido we want to update
     *   }
     * })
    **/
    upsert<T extends PedidoUpsertArgs>(
      args: SelectSubset<T, PedidoUpsertArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedido.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends PedidoCountArgs>(
      args?: Subset<T, PedidoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidoAggregateArgs>(args: Subset<T, PedidoAggregateArgs>): PrismaPromise<GetPedidoAggregateType<T>>

    /**
     * Group by Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidoGroupByArgs['orderBy'] }
        : { orderBy?: PedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PedidoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cliente<T extends ClienteArgs= {}>(args?: Subset<T, ClienteArgs>): Prisma__ClienteClient<ClienteGetPayload<T> | Null>;

    funcionario<T extends FuncionarioArgs= {}>(args?: Subset<T, FuncionarioArgs>): Prisma__FuncionarioClient<FuncionarioGetPayload<T> | Null>;

    itens_pedido<T extends PedidoItens_pedidoArgs= {}>(args?: Subset<T, PedidoItens_pedidoArgs>): PrismaPromise<Array<Item_PedidoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pedido base type for findUnique actions
   */
  export type PedidoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     * 
    **/
    where: PedidoWhereUniqueInput
  }

  /**
   * Pedido findUnique
   */
  export interface PedidoFindUniqueArgs extends PedidoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pedido findUniqueOrThrow
   */
  export type PedidoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     * 
    **/
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido base type for findFirst actions
   */
  export type PedidoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     * 
    **/
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     * 
    **/
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     * 
    **/
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }

  /**
   * Pedido findFirst
   */
  export interface PedidoFindFirstArgs extends PedidoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pedido findFirstOrThrow
   */
  export type PedidoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     * 
    **/
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     * 
    **/
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     * 
    **/
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Pedido findMany
   */
  export type PedidoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * Filter, which Pedidos to fetch.
     * 
    **/
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedidos.
     * 
    **/
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Pedido create
   */
  export type PedidoCreateArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * The data needed to create a Pedido.
     * 
    **/
    data: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
  }


  /**
   * Pedido createMany
   */
  export type PedidoCreateManyArgs = {
    /**
     * The data used to create many Pedidos.
     * 
    **/
    data: Enumerable<PedidoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pedido update
   */
  export type PedidoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * The data needed to update a Pedido.
     * 
    **/
    data: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
    /**
     * Choose, which Pedido to update.
     * 
    **/
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido updateMany
   */
  export type PedidoUpdateManyArgs = {
    /**
     * The data used to update Pedidos.
     * 
    **/
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyInput>
    /**
     * Filter which Pedidos to update
     * 
    **/
    where?: PedidoWhereInput
  }


  /**
   * Pedido upsert
   */
  export type PedidoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * The filter to search for the Pedido to update in case it exists.
     * 
    **/
    where: PedidoWhereUniqueInput
    /**
     * In case the Pedido found by the `where` argument doesn't exist, create a new Pedido with this data.
     * 
    **/
    create: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
    /**
     * In case the Pedido was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
  }


  /**
   * Pedido delete
   */
  export type PedidoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
    /**
     * Filter which Pedido to delete.
     * 
    **/
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido deleteMany
   */
  export type PedidoDeleteManyArgs = {
    /**
     * Filter which Pedidos to delete
     * 
    **/
    where?: PedidoWhereInput
  }


  /**
   * Pedido.itens_pedido
   */
  export type PedidoItens_pedidoArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    where?: Item_PedidoWhereInput
    orderBy?: Enumerable<Item_PedidoOrderByWithRelationInput>
    cursor?: Item_PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Item_PedidoScalarFieldEnum>
  }


  /**
   * Pedido without action
   */
  export type PedidoArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     * 
    **/
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidoInclude | null
  }



  /**
   * Model Item_Pedido
   */


  export type AggregateItem_Pedido = {
    _count: Item_PedidoCountAggregateOutputType | null
    _avg: Item_PedidoAvgAggregateOutputType | null
    _sum: Item_PedidoSumAggregateOutputType | null
    _min: Item_PedidoMinAggregateOutputType | null
    _max: Item_PedidoMaxAggregateOutputType | null
  }

  export type Item_PedidoAvgAggregateOutputType = {
    item_pedido_id: number | null
    valor_total: number | null
    produto_id: number | null
    pedido_id: number | null
  }

  export type Item_PedidoSumAggregateOutputType = {
    item_pedido_id: number | null
    valor_total: number | null
    produto_id: number | null
    pedido_id: number | null
  }

  export type Item_PedidoMinAggregateOutputType = {
    item_pedido_id: number | null
    data_pedido: Date | null
    valor_total: number | null
    produto_id: number | null
    pedido_id: number | null
  }

  export type Item_PedidoMaxAggregateOutputType = {
    item_pedido_id: number | null
    data_pedido: Date | null
    valor_total: number | null
    produto_id: number | null
    pedido_id: number | null
  }

  export type Item_PedidoCountAggregateOutputType = {
    item_pedido_id: number
    data_pedido: number
    valor_total: number
    produto_id: number
    pedido_id: number
    _all: number
  }


  export type Item_PedidoAvgAggregateInputType = {
    item_pedido_id?: true
    valor_total?: true
    produto_id?: true
    pedido_id?: true
  }

  export type Item_PedidoSumAggregateInputType = {
    item_pedido_id?: true
    valor_total?: true
    produto_id?: true
    pedido_id?: true
  }

  export type Item_PedidoMinAggregateInputType = {
    item_pedido_id?: true
    data_pedido?: true
    valor_total?: true
    produto_id?: true
    pedido_id?: true
  }

  export type Item_PedidoMaxAggregateInputType = {
    item_pedido_id?: true
    data_pedido?: true
    valor_total?: true
    produto_id?: true
    pedido_id?: true
  }

  export type Item_PedidoCountAggregateInputType = {
    item_pedido_id?: true
    data_pedido?: true
    valor_total?: true
    produto_id?: true
    pedido_id?: true
    _all?: true
  }

  export type Item_PedidoAggregateArgs = {
    /**
     * Filter which Item_Pedido to aggregate.
     * 
    **/
    where?: Item_PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Item_Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<Item_PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Item_PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Item_Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Item_Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Item_Pedidos
    **/
    _count?: true | Item_PedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Item_PedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Item_PedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Item_PedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Item_PedidoMaxAggregateInputType
  }

  export type GetItem_PedidoAggregateType<T extends Item_PedidoAggregateArgs> = {
        [P in keyof T & keyof AggregateItem_Pedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem_Pedido[P]>
      : GetScalarType<T[P], AggregateItem_Pedido[P]>
  }




  export type Item_PedidoGroupByArgs = {
    where?: Item_PedidoWhereInput
    orderBy?: Enumerable<Item_PedidoOrderByWithAggregationInput>
    by: Array<Item_PedidoScalarFieldEnum>
    having?: Item_PedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Item_PedidoCountAggregateInputType | true
    _avg?: Item_PedidoAvgAggregateInputType
    _sum?: Item_PedidoSumAggregateInputType
    _min?: Item_PedidoMinAggregateInputType
    _max?: Item_PedidoMaxAggregateInputType
  }


  export type Item_PedidoGroupByOutputType = {
    item_pedido_id: number
    data_pedido: Date
    valor_total: number
    produto_id: number
    pedido_id: number
    _count: Item_PedidoCountAggregateOutputType | null
    _avg: Item_PedidoAvgAggregateOutputType | null
    _sum: Item_PedidoSumAggregateOutputType | null
    _min: Item_PedidoMinAggregateOutputType | null
    _max: Item_PedidoMaxAggregateOutputType | null
  }

  type GetItem_PedidoGroupByPayload<T extends Item_PedidoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Item_PedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Item_PedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Item_PedidoGroupByOutputType[P]>
            : GetScalarType<T[P], Item_PedidoGroupByOutputType[P]>
        }
      >
    >


  export type Item_PedidoSelect = {
    item_pedido_id?: boolean
    data_pedido?: boolean
    valor_total?: boolean
    produto?: boolean | ProdutoArgs
    produto_id?: boolean
    pedido?: boolean | PedidoArgs
    pedido_id?: boolean
  }


  export type Item_PedidoInclude = {
    produto?: boolean | ProdutoArgs
    pedido?: boolean | PedidoArgs
  } 

  export type Item_PedidoGetPayload<S extends boolean | null | undefined | Item_PedidoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Item_Pedido :
    S extends undefined ? never :
    S extends { include: any } & (Item_PedidoArgs | Item_PedidoFindManyArgs)
    ? Item_Pedido  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'produto' ? ProdutoGetPayload<S['include'][P]> :
        P extends 'pedido' ? PedidoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Item_PedidoArgs | Item_PedidoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'produto' ? ProdutoGetPayload<S['select'][P]> :
        P extends 'pedido' ? PedidoGetPayload<S['select'][P]> :  P extends keyof Item_Pedido ? Item_Pedido[P] : never
  } 
      : Item_Pedido


  type Item_PedidoCountArgs = Merge<
    Omit<Item_PedidoFindManyArgs, 'select' | 'include'> & {
      select?: Item_PedidoCountAggregateInputType | true
    }
  >

  export interface Item_PedidoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Item_Pedido that matches the filter.
     * @param {Item_PedidoFindUniqueArgs} args - Arguments to find a Item_Pedido
     * @example
     * // Get one Item_Pedido
     * const item_Pedido = await prisma.item_Pedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Item_PedidoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Item_PedidoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Item_Pedido'> extends True ? Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>> : Prisma__Item_PedidoClient<Item_PedidoGetPayload<T> | null, null>

    /**
     * Find one Item_Pedido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Item_PedidoFindUniqueOrThrowArgs} args - Arguments to find a Item_Pedido
     * @example
     * // Get one Item_Pedido
     * const item_Pedido = await prisma.item_Pedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Item_PedidoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Item_PedidoFindUniqueOrThrowArgs>
    ): Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>>

    /**
     * Find the first Item_Pedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_PedidoFindFirstArgs} args - Arguments to find a Item_Pedido
     * @example
     * // Get one Item_Pedido
     * const item_Pedido = await prisma.item_Pedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Item_PedidoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Item_PedidoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Item_Pedido'> extends True ? Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>> : Prisma__Item_PedidoClient<Item_PedidoGetPayload<T> | null, null>

    /**
     * Find the first Item_Pedido that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_PedidoFindFirstOrThrowArgs} args - Arguments to find a Item_Pedido
     * @example
     * // Get one Item_Pedido
     * const item_Pedido = await prisma.item_Pedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Item_PedidoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Item_PedidoFindFirstOrThrowArgs>
    ): Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>>

    /**
     * Find zero or more Item_Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_PedidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Item_Pedidos
     * const item_Pedidos = await prisma.item_Pedido.findMany()
     * 
     * // Get first 10 Item_Pedidos
     * const item_Pedidos = await prisma.item_Pedido.findMany({ take: 10 })
     * 
     * // Only select the `item_pedido_id`
     * const item_PedidoWithItem_pedido_idOnly = await prisma.item_Pedido.findMany({ select: { item_pedido_id: true } })
     * 
    **/
    findMany<T extends Item_PedidoFindManyArgs>(
      args?: SelectSubset<T, Item_PedidoFindManyArgs>
    ): PrismaPromise<Array<Item_PedidoGetPayload<T>>>

    /**
     * Create a Item_Pedido.
     * @param {Item_PedidoCreateArgs} args - Arguments to create a Item_Pedido.
     * @example
     * // Create one Item_Pedido
     * const Item_Pedido = await prisma.item_Pedido.create({
     *   data: {
     *     // ... data to create a Item_Pedido
     *   }
     * })
     * 
    **/
    create<T extends Item_PedidoCreateArgs>(
      args: SelectSubset<T, Item_PedidoCreateArgs>
    ): Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>>

    /**
     * Create many Item_Pedidos.
     *     @param {Item_PedidoCreateManyArgs} args - Arguments to create many Item_Pedidos.
     *     @example
     *     // Create many Item_Pedidos
     *     const item_Pedido = await prisma.item_Pedido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Item_PedidoCreateManyArgs>(
      args?: SelectSubset<T, Item_PedidoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Item_Pedido.
     * @param {Item_PedidoDeleteArgs} args - Arguments to delete one Item_Pedido.
     * @example
     * // Delete one Item_Pedido
     * const Item_Pedido = await prisma.item_Pedido.delete({
     *   where: {
     *     // ... filter to delete one Item_Pedido
     *   }
     * })
     * 
    **/
    delete<T extends Item_PedidoDeleteArgs>(
      args: SelectSubset<T, Item_PedidoDeleteArgs>
    ): Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>>

    /**
     * Update one Item_Pedido.
     * @param {Item_PedidoUpdateArgs} args - Arguments to update one Item_Pedido.
     * @example
     * // Update one Item_Pedido
     * const item_Pedido = await prisma.item_Pedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Item_PedidoUpdateArgs>(
      args: SelectSubset<T, Item_PedidoUpdateArgs>
    ): Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>>

    /**
     * Delete zero or more Item_Pedidos.
     * @param {Item_PedidoDeleteManyArgs} args - Arguments to filter Item_Pedidos to delete.
     * @example
     * // Delete a few Item_Pedidos
     * const { count } = await prisma.item_Pedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Item_PedidoDeleteManyArgs>(
      args?: SelectSubset<T, Item_PedidoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Item_Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_PedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Item_Pedidos
     * const item_Pedido = await prisma.item_Pedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Item_PedidoUpdateManyArgs>(
      args: SelectSubset<T, Item_PedidoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Item_Pedido.
     * @param {Item_PedidoUpsertArgs} args - Arguments to update or create a Item_Pedido.
     * @example
     * // Update or create a Item_Pedido
     * const item_Pedido = await prisma.item_Pedido.upsert({
     *   create: {
     *     // ... data to create a Item_Pedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item_Pedido we want to update
     *   }
     * })
    **/
    upsert<T extends Item_PedidoUpsertArgs>(
      args: SelectSubset<T, Item_PedidoUpsertArgs>
    ): Prisma__Item_PedidoClient<Item_PedidoGetPayload<T>>

    /**
     * Count the number of Item_Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_PedidoCountArgs} args - Arguments to filter Item_Pedidos to count.
     * @example
     * // Count the number of Item_Pedidos
     * const count = await prisma.item_Pedido.count({
     *   where: {
     *     // ... the filter for the Item_Pedidos we want to count
     *   }
     * })
    **/
    count<T extends Item_PedidoCountArgs>(
      args?: Subset<T, Item_PedidoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Item_PedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item_Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_PedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Item_PedidoAggregateArgs>(args: Subset<T, Item_PedidoAggregateArgs>): PrismaPromise<GetItem_PedidoAggregateType<T>>

    /**
     * Group by Item_Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_PedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Item_PedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Item_PedidoGroupByArgs['orderBy'] }
        : { orderBy?: Item_PedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Item_PedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItem_PedidoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Item_Pedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Item_PedidoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produto<T extends ProdutoArgs= {}>(args?: Subset<T, ProdutoArgs>): Prisma__ProdutoClient<ProdutoGetPayload<T> | Null>;

    pedido<T extends PedidoArgs= {}>(args?: Subset<T, PedidoArgs>): Prisma__PedidoClient<PedidoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Item_Pedido base type for findUnique actions
   */
  export type Item_PedidoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * Filter, which Item_Pedido to fetch.
     * 
    **/
    where: Item_PedidoWhereUniqueInput
  }

  /**
   * Item_Pedido findUnique
   */
  export interface Item_PedidoFindUniqueArgs extends Item_PedidoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Item_Pedido findUniqueOrThrow
   */
  export type Item_PedidoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * Filter, which Item_Pedido to fetch.
     * 
    **/
    where: Item_PedidoWhereUniqueInput
  }


  /**
   * Item_Pedido base type for findFirst actions
   */
  export type Item_PedidoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * Filter, which Item_Pedido to fetch.
     * 
    **/
    where?: Item_PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Item_Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<Item_PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Item_Pedidos.
     * 
    **/
    cursor?: Item_PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Item_Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Item_Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Item_Pedidos.
     * 
    **/
    distinct?: Enumerable<Item_PedidoScalarFieldEnum>
  }

  /**
   * Item_Pedido findFirst
   */
  export interface Item_PedidoFindFirstArgs extends Item_PedidoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Item_Pedido findFirstOrThrow
   */
  export type Item_PedidoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * Filter, which Item_Pedido to fetch.
     * 
    **/
    where?: Item_PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Item_Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<Item_PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Item_Pedidos.
     * 
    **/
    cursor?: Item_PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Item_Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Item_Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Item_Pedidos.
     * 
    **/
    distinct?: Enumerable<Item_PedidoScalarFieldEnum>
  }


  /**
   * Item_Pedido findMany
   */
  export type Item_PedidoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * Filter, which Item_Pedidos to fetch.
     * 
    **/
    where?: Item_PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Item_Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<Item_PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Item_Pedidos.
     * 
    **/
    cursor?: Item_PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Item_Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Item_Pedidos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Item_PedidoScalarFieldEnum>
  }


  /**
   * Item_Pedido create
   */
  export type Item_PedidoCreateArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * The data needed to create a Item_Pedido.
     * 
    **/
    data: XOR<Item_PedidoCreateInput, Item_PedidoUncheckedCreateInput>
  }


  /**
   * Item_Pedido createMany
   */
  export type Item_PedidoCreateManyArgs = {
    /**
     * The data used to create many Item_Pedidos.
     * 
    **/
    data: Enumerable<Item_PedidoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Item_Pedido update
   */
  export type Item_PedidoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * The data needed to update a Item_Pedido.
     * 
    **/
    data: XOR<Item_PedidoUpdateInput, Item_PedidoUncheckedUpdateInput>
    /**
     * Choose, which Item_Pedido to update.
     * 
    **/
    where: Item_PedidoWhereUniqueInput
  }


  /**
   * Item_Pedido updateMany
   */
  export type Item_PedidoUpdateManyArgs = {
    /**
     * The data used to update Item_Pedidos.
     * 
    **/
    data: XOR<Item_PedidoUpdateManyMutationInput, Item_PedidoUncheckedUpdateManyInput>
    /**
     * Filter which Item_Pedidos to update
     * 
    **/
    where?: Item_PedidoWhereInput
  }


  /**
   * Item_Pedido upsert
   */
  export type Item_PedidoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * The filter to search for the Item_Pedido to update in case it exists.
     * 
    **/
    where: Item_PedidoWhereUniqueInput
    /**
     * In case the Item_Pedido found by the `where` argument doesn't exist, create a new Item_Pedido with this data.
     * 
    **/
    create: XOR<Item_PedidoCreateInput, Item_PedidoUncheckedCreateInput>
    /**
     * In case the Item_Pedido was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Item_PedidoUpdateInput, Item_PedidoUncheckedUpdateInput>
  }


  /**
   * Item_Pedido delete
   */
  export type Item_PedidoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    /**
     * Filter which Item_Pedido to delete.
     * 
    **/
    where: Item_PedidoWhereUniqueInput
  }


  /**
   * Item_Pedido deleteMany
   */
  export type Item_PedidoDeleteManyArgs = {
    /**
     * Filter which Item_Pedidos to delete
     * 
    **/
    where?: Item_PedidoWhereInput
  }


  /**
   * Item_Pedido without action
   */
  export type Item_PedidoArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
  }



  /**
   * Model Produto
   */


  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    produto_id: number | null
    preco: number | null
    categoria_id: number | null
    fornecedor_id: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    produto_id: number | null
    preco: number | null
    categoria_id: number | null
    fornecedor_id: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    produto_id: number | null
    nome_produto: string | null
    descricao: string | null
    preco: number | null
    categoria_id: number | null
    fornecedor_id: number | null
  }

  export type ProdutoMaxAggregateOutputType = {
    produto_id: number | null
    nome_produto: string | null
    descricao: string | null
    preco: number | null
    categoria_id: number | null
    fornecedor_id: number | null
  }

  export type ProdutoCountAggregateOutputType = {
    produto_id: number
    nome_produto: number
    descricao: number
    preco: number
    categoria_id: number
    fornecedor_id: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    produto_id?: true
    preco?: true
    categoria_id?: true
    fornecedor_id?: true
  }

  export type ProdutoSumAggregateInputType = {
    produto_id?: true
    preco?: true
    categoria_id?: true
    fornecedor_id?: true
  }

  export type ProdutoMinAggregateInputType = {
    produto_id?: true
    nome_produto?: true
    descricao?: true
    preco?: true
    categoria_id?: true
    fornecedor_id?: true
  }

  export type ProdutoMaxAggregateInputType = {
    produto_id?: true
    nome_produto?: true
    descricao?: true
    preco?: true
    categoria_id?: true
    fornecedor_id?: true
  }

  export type ProdutoCountAggregateInputType = {
    produto_id?: true
    nome_produto?: true
    descricao?: true
    preco?: true
    categoria_id?: true
    fornecedor_id?: true
    _all?: true
  }

  export type ProdutoAggregateArgs = {
    /**
     * Filter which Produto to aggregate.
     * 
    **/
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs = {
    where?: ProdutoWhereInput
    orderBy?: Enumerable<ProdutoOrderByWithAggregationInput>
    by: Array<ProdutoScalarFieldEnum>
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }


  export type ProdutoGroupByOutputType = {
    produto_id: number
    nome_produto: string
    descricao: string
    preco: number
    categoria_id: number
    fornecedor_id: number
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect = {
    produto_id?: boolean
    nome_produto?: boolean
    descricao?: boolean
    preco?: boolean
    categoria?: boolean | Categoria_ProdutoArgs
    categoria_id?: boolean
    fornecedor?: boolean | FornecedorArgs
    fornecedor_id?: boolean
    itens_pedido?: boolean | ProdutoItens_pedidoArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  }


  export type ProdutoInclude = {
    categoria?: boolean | Categoria_ProdutoArgs
    fornecedor?: boolean | FornecedorArgs
    itens_pedido?: boolean | ProdutoItens_pedidoArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  } 

  export type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Produto :
    S extends undefined ? never :
    S extends { include: any } & (ProdutoArgs | ProdutoFindManyArgs)
    ? Produto  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'categoria' ? Categoria_ProdutoGetPayload<S['include'][P]> :
        P extends 'fornecedor' ? FornecedorGetPayload<S['include'][P]> :
        P extends 'itens_pedido' ? Array < Item_PedidoGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProdutoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProdutoArgs | ProdutoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'categoria' ? Categoria_ProdutoGetPayload<S['select'][P]> :
        P extends 'fornecedor' ? FornecedorGetPayload<S['select'][P]> :
        P extends 'itens_pedido' ? Array < Item_PedidoGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProdutoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Produto ? Produto[P] : never
  } 
      : Produto


  type ProdutoCountArgs = Merge<
    Omit<ProdutoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }
  >

  export interface ProdutoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProdutoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Produto'> extends True ? Prisma__ProdutoClient<ProdutoGetPayload<T>> : Prisma__ProdutoClient<ProdutoGetPayload<T> | null, null>

    /**
     * Find one Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProdutoFindUniqueOrThrowArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProdutoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Produto'> extends True ? Prisma__ProdutoClient<ProdutoGetPayload<T>> : Prisma__ProdutoClient<ProdutoGetPayload<T> | null, null>

    /**
     * Find the first Produto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `produto_id`
     * const produtoWithProduto_idOnly = await prisma.produto.findMany({ select: { produto_id: true } })
     * 
    **/
    findMany<T extends ProdutoFindManyArgs>(
      args?: SelectSubset<T, ProdutoFindManyArgs>
    ): PrismaPromise<Array<ProdutoGetPayload<T>>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends ProdutoCreateArgs>(
      args: SelectSubset<T, ProdutoCreateArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Create many Produtos.
     *     @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutoCreateManyArgs>(
      args?: SelectSubset<T, ProdutoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends ProdutoDeleteArgs>(
      args: SelectSubset<T, ProdutoDeleteArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutoUpdateArgs>(
      args: SelectSubset<T, ProdutoUpdateArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutoDeleteManyArgs>(
      args?: SelectSubset<T, ProdutoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutoUpdateManyArgs>(
      args: SelectSubset<T, ProdutoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutoUpsertArgs>(
      args: SelectSubset<T, ProdutoUpsertArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProdutoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categoria<T extends Categoria_ProdutoArgs= {}>(args?: Subset<T, Categoria_ProdutoArgs>): Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T> | Null>;

    fornecedor<T extends FornecedorArgs= {}>(args?: Subset<T, FornecedorArgs>): Prisma__FornecedorClient<FornecedorGetPayload<T> | Null>;

    itens_pedido<T extends ProdutoItens_pedidoArgs= {}>(args?: Subset<T, ProdutoItens_pedidoArgs>): PrismaPromise<Array<Item_PedidoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Produto base type for findUnique actions
   */
  export type ProdutoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     * 
    **/
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUnique
   */
  export interface ProdutoFindUniqueArgs extends ProdutoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     * 
    **/
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto base type for findFirst actions
   */
  export type ProdutoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     * 
    **/
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     * 
    **/
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     * 
    **/
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }

  /**
   * Produto findFirst
   */
  export interface ProdutoFindFirstArgs extends ProdutoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     * 
    **/
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     * 
    **/
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     * 
    **/
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * Filter, which Produtos to fetch.
     * 
    **/
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     * 
    **/
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Produto create
   */
  export type ProdutoCreateArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * The data needed to create a Produto.
     * 
    **/
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }


  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs = {
    /**
     * The data used to create many Produtos.
     * 
    **/
    data: Enumerable<ProdutoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Produto update
   */
  export type ProdutoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * The data needed to update a Produto.
     * 
    **/
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     * 
    **/
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs = {
    /**
     * The data used to update Produtos.
     * 
    **/
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     * 
    **/
    where?: ProdutoWhereInput
  }


  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * The filter to search for the Produto to update in case it exists.
     * 
    **/
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     * 
    **/
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }


  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    /**
     * Filter which Produto to delete.
     * 
    **/
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs = {
    /**
     * Filter which Produtos to delete
     * 
    **/
    where?: ProdutoWhereInput
  }


  /**
   * Produto.itens_pedido
   */
  export type ProdutoItens_pedidoArgs = {
    /**
     * Select specific fields to fetch from the Item_Pedido
     * 
    **/
    select?: Item_PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_PedidoInclude | null
    where?: Item_PedidoWhereInput
    orderBy?: Enumerable<Item_PedidoOrderByWithRelationInput>
    cursor?: Item_PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Item_PedidoScalarFieldEnum>
  }


  /**
   * Produto without action
   */
  export type ProdutoArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
  }



  /**
   * Model Fornecedor
   */


  export type AggregateFornecedor = {
    _count: FornecedorCountAggregateOutputType | null
    _avg: FornecedorAvgAggregateOutputType | null
    _sum: FornecedorSumAggregateOutputType | null
    _min: FornecedorMinAggregateOutputType | null
    _max: FornecedorMaxAggregateOutputType | null
  }

  export type FornecedorAvgAggregateOutputType = {
    fornecedor_id: number | null
  }

  export type FornecedorSumAggregateOutputType = {
    fornecedor_id: number | null
  }

  export type FornecedorMinAggregateOutputType = {
    fornecedor_id: number | null
    nome_fornecedor: string | null
    telefone: string | null
    email: string | null
    endereco: string | null
  }

  export type FornecedorMaxAggregateOutputType = {
    fornecedor_id: number | null
    nome_fornecedor: string | null
    telefone: string | null
    email: string | null
    endereco: string | null
  }

  export type FornecedorCountAggregateOutputType = {
    fornecedor_id: number
    nome_fornecedor: number
    telefone: number
    email: number
    endereco: number
    _all: number
  }


  export type FornecedorAvgAggregateInputType = {
    fornecedor_id?: true
  }

  export type FornecedorSumAggregateInputType = {
    fornecedor_id?: true
  }

  export type FornecedorMinAggregateInputType = {
    fornecedor_id?: true
    nome_fornecedor?: true
    telefone?: true
    email?: true
    endereco?: true
  }

  export type FornecedorMaxAggregateInputType = {
    fornecedor_id?: true
    nome_fornecedor?: true
    telefone?: true
    email?: true
    endereco?: true
  }

  export type FornecedorCountAggregateInputType = {
    fornecedor_id?: true
    nome_fornecedor?: true
    telefone?: true
    email?: true
    endereco?: true
    _all?: true
  }

  export type FornecedorAggregateArgs = {
    /**
     * Filter which Fornecedor to aggregate.
     * 
    **/
    where?: FornecedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fornecedors to fetch.
     * 
    **/
    orderBy?: Enumerable<FornecedorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FornecedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fornecedors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fornecedors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fornecedors
    **/
    _count?: true | FornecedorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FornecedorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FornecedorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FornecedorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FornecedorMaxAggregateInputType
  }

  export type GetFornecedorAggregateType<T extends FornecedorAggregateArgs> = {
        [P in keyof T & keyof AggregateFornecedor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFornecedor[P]>
      : GetScalarType<T[P], AggregateFornecedor[P]>
  }




  export type FornecedorGroupByArgs = {
    where?: FornecedorWhereInput
    orderBy?: Enumerable<FornecedorOrderByWithAggregationInput>
    by: Array<FornecedorScalarFieldEnum>
    having?: FornecedorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FornecedorCountAggregateInputType | true
    _avg?: FornecedorAvgAggregateInputType
    _sum?: FornecedorSumAggregateInputType
    _min?: FornecedorMinAggregateInputType
    _max?: FornecedorMaxAggregateInputType
  }


  export type FornecedorGroupByOutputType = {
    fornecedor_id: number
    nome_fornecedor: string
    telefone: string
    email: string
    endereco: string
    _count: FornecedorCountAggregateOutputType | null
    _avg: FornecedorAvgAggregateOutputType | null
    _sum: FornecedorSumAggregateOutputType | null
    _min: FornecedorMinAggregateOutputType | null
    _max: FornecedorMaxAggregateOutputType | null
  }

  type GetFornecedorGroupByPayload<T extends FornecedorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FornecedorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FornecedorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FornecedorGroupByOutputType[P]>
            : GetScalarType<T[P], FornecedorGroupByOutputType[P]>
        }
      >
    >


  export type FornecedorSelect = {
    fornecedor_id?: boolean
    nome_fornecedor?: boolean
    telefone?: boolean
    email?: boolean
    endereco?: boolean
    produtos?: boolean | FornecedorProdutosArgs
    _count?: boolean | FornecedorCountOutputTypeArgs
  }


  export type FornecedorInclude = {
    produtos?: boolean | FornecedorProdutosArgs
    _count?: boolean | FornecedorCountOutputTypeArgs
  } 

  export type FornecedorGetPayload<S extends boolean | null | undefined | FornecedorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Fornecedor :
    S extends undefined ? never :
    S extends { include: any } & (FornecedorArgs | FornecedorFindManyArgs)
    ? Fornecedor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'produtos' ? Array < ProdutoGetPayload<S['include'][P]>>  :
        P extends '_count' ? FornecedorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FornecedorArgs | FornecedorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'produtos' ? Array < ProdutoGetPayload<S['select'][P]>>  :
        P extends '_count' ? FornecedorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Fornecedor ? Fornecedor[P] : never
  } 
      : Fornecedor


  type FornecedorCountArgs = Merge<
    Omit<FornecedorFindManyArgs, 'select' | 'include'> & {
      select?: FornecedorCountAggregateInputType | true
    }
  >

  export interface FornecedorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Fornecedor that matches the filter.
     * @param {FornecedorFindUniqueArgs} args - Arguments to find a Fornecedor
     * @example
     * // Get one Fornecedor
     * const fornecedor = await prisma.fornecedor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FornecedorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FornecedorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Fornecedor'> extends True ? Prisma__FornecedorClient<FornecedorGetPayload<T>> : Prisma__FornecedorClient<FornecedorGetPayload<T> | null, null>

    /**
     * Find one Fornecedor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FornecedorFindUniqueOrThrowArgs} args - Arguments to find a Fornecedor
     * @example
     * // Get one Fornecedor
     * const fornecedor = await prisma.fornecedor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FornecedorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FornecedorFindUniqueOrThrowArgs>
    ): Prisma__FornecedorClient<FornecedorGetPayload<T>>

    /**
     * Find the first Fornecedor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FornecedorFindFirstArgs} args - Arguments to find a Fornecedor
     * @example
     * // Get one Fornecedor
     * const fornecedor = await prisma.fornecedor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FornecedorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FornecedorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Fornecedor'> extends True ? Prisma__FornecedorClient<FornecedorGetPayload<T>> : Prisma__FornecedorClient<FornecedorGetPayload<T> | null, null>

    /**
     * Find the first Fornecedor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FornecedorFindFirstOrThrowArgs} args - Arguments to find a Fornecedor
     * @example
     * // Get one Fornecedor
     * const fornecedor = await prisma.fornecedor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FornecedorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FornecedorFindFirstOrThrowArgs>
    ): Prisma__FornecedorClient<FornecedorGetPayload<T>>

    /**
     * Find zero or more Fornecedors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FornecedorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fornecedors
     * const fornecedors = await prisma.fornecedor.findMany()
     * 
     * // Get first 10 Fornecedors
     * const fornecedors = await prisma.fornecedor.findMany({ take: 10 })
     * 
     * // Only select the `fornecedor_id`
     * const fornecedorWithFornecedor_idOnly = await prisma.fornecedor.findMany({ select: { fornecedor_id: true } })
     * 
    **/
    findMany<T extends FornecedorFindManyArgs>(
      args?: SelectSubset<T, FornecedorFindManyArgs>
    ): PrismaPromise<Array<FornecedorGetPayload<T>>>

    /**
     * Create a Fornecedor.
     * @param {FornecedorCreateArgs} args - Arguments to create a Fornecedor.
     * @example
     * // Create one Fornecedor
     * const Fornecedor = await prisma.fornecedor.create({
     *   data: {
     *     // ... data to create a Fornecedor
     *   }
     * })
     * 
    **/
    create<T extends FornecedorCreateArgs>(
      args: SelectSubset<T, FornecedorCreateArgs>
    ): Prisma__FornecedorClient<FornecedorGetPayload<T>>

    /**
     * Create many Fornecedors.
     *     @param {FornecedorCreateManyArgs} args - Arguments to create many Fornecedors.
     *     @example
     *     // Create many Fornecedors
     *     const fornecedor = await prisma.fornecedor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FornecedorCreateManyArgs>(
      args?: SelectSubset<T, FornecedorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Fornecedor.
     * @param {FornecedorDeleteArgs} args - Arguments to delete one Fornecedor.
     * @example
     * // Delete one Fornecedor
     * const Fornecedor = await prisma.fornecedor.delete({
     *   where: {
     *     // ... filter to delete one Fornecedor
     *   }
     * })
     * 
    **/
    delete<T extends FornecedorDeleteArgs>(
      args: SelectSubset<T, FornecedorDeleteArgs>
    ): Prisma__FornecedorClient<FornecedorGetPayload<T>>

    /**
     * Update one Fornecedor.
     * @param {FornecedorUpdateArgs} args - Arguments to update one Fornecedor.
     * @example
     * // Update one Fornecedor
     * const fornecedor = await prisma.fornecedor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FornecedorUpdateArgs>(
      args: SelectSubset<T, FornecedorUpdateArgs>
    ): Prisma__FornecedorClient<FornecedorGetPayload<T>>

    /**
     * Delete zero or more Fornecedors.
     * @param {FornecedorDeleteManyArgs} args - Arguments to filter Fornecedors to delete.
     * @example
     * // Delete a few Fornecedors
     * const { count } = await prisma.fornecedor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FornecedorDeleteManyArgs>(
      args?: SelectSubset<T, FornecedorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fornecedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FornecedorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fornecedors
     * const fornecedor = await prisma.fornecedor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FornecedorUpdateManyArgs>(
      args: SelectSubset<T, FornecedorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Fornecedor.
     * @param {FornecedorUpsertArgs} args - Arguments to update or create a Fornecedor.
     * @example
     * // Update or create a Fornecedor
     * const fornecedor = await prisma.fornecedor.upsert({
     *   create: {
     *     // ... data to create a Fornecedor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fornecedor we want to update
     *   }
     * })
    **/
    upsert<T extends FornecedorUpsertArgs>(
      args: SelectSubset<T, FornecedorUpsertArgs>
    ): Prisma__FornecedorClient<FornecedorGetPayload<T>>

    /**
     * Count the number of Fornecedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FornecedorCountArgs} args - Arguments to filter Fornecedors to count.
     * @example
     * // Count the number of Fornecedors
     * const count = await prisma.fornecedor.count({
     *   where: {
     *     // ... the filter for the Fornecedors we want to count
     *   }
     * })
    **/
    count<T extends FornecedorCountArgs>(
      args?: Subset<T, FornecedorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FornecedorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fornecedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FornecedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FornecedorAggregateArgs>(args: Subset<T, FornecedorAggregateArgs>): PrismaPromise<GetFornecedorAggregateType<T>>

    /**
     * Group by Fornecedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FornecedorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FornecedorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FornecedorGroupByArgs['orderBy'] }
        : { orderBy?: FornecedorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FornecedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFornecedorGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Fornecedor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FornecedorClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produtos<T extends FornecedorProdutosArgs= {}>(args?: Subset<T, FornecedorProdutosArgs>): PrismaPromise<Array<ProdutoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Fornecedor base type for findUnique actions
   */
  export type FornecedorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * Filter, which Fornecedor to fetch.
     * 
    **/
    where: FornecedorWhereUniqueInput
  }

  /**
   * Fornecedor findUnique
   */
  export interface FornecedorFindUniqueArgs extends FornecedorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fornecedor findUniqueOrThrow
   */
  export type FornecedorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * Filter, which Fornecedor to fetch.
     * 
    **/
    where: FornecedorWhereUniqueInput
  }


  /**
   * Fornecedor base type for findFirst actions
   */
  export type FornecedorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * Filter, which Fornecedor to fetch.
     * 
    **/
    where?: FornecedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fornecedors to fetch.
     * 
    **/
    orderBy?: Enumerable<FornecedorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fornecedors.
     * 
    **/
    cursor?: FornecedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fornecedors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fornecedors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fornecedors.
     * 
    **/
    distinct?: Enumerable<FornecedorScalarFieldEnum>
  }

  /**
   * Fornecedor findFirst
   */
  export interface FornecedorFindFirstArgs extends FornecedorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fornecedor findFirstOrThrow
   */
  export type FornecedorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * Filter, which Fornecedor to fetch.
     * 
    **/
    where?: FornecedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fornecedors to fetch.
     * 
    **/
    orderBy?: Enumerable<FornecedorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fornecedors.
     * 
    **/
    cursor?: FornecedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fornecedors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fornecedors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fornecedors.
     * 
    **/
    distinct?: Enumerable<FornecedorScalarFieldEnum>
  }


  /**
   * Fornecedor findMany
   */
  export type FornecedorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * Filter, which Fornecedors to fetch.
     * 
    **/
    where?: FornecedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fornecedors to fetch.
     * 
    **/
    orderBy?: Enumerable<FornecedorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fornecedors.
     * 
    **/
    cursor?: FornecedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fornecedors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fornecedors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FornecedorScalarFieldEnum>
  }


  /**
   * Fornecedor create
   */
  export type FornecedorCreateArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * The data needed to create a Fornecedor.
     * 
    **/
    data: XOR<FornecedorCreateInput, FornecedorUncheckedCreateInput>
  }


  /**
   * Fornecedor createMany
   */
  export type FornecedorCreateManyArgs = {
    /**
     * The data used to create many Fornecedors.
     * 
    **/
    data: Enumerable<FornecedorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Fornecedor update
   */
  export type FornecedorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * The data needed to update a Fornecedor.
     * 
    **/
    data: XOR<FornecedorUpdateInput, FornecedorUncheckedUpdateInput>
    /**
     * Choose, which Fornecedor to update.
     * 
    **/
    where: FornecedorWhereUniqueInput
  }


  /**
   * Fornecedor updateMany
   */
  export type FornecedorUpdateManyArgs = {
    /**
     * The data used to update Fornecedors.
     * 
    **/
    data: XOR<FornecedorUpdateManyMutationInput, FornecedorUncheckedUpdateManyInput>
    /**
     * Filter which Fornecedors to update
     * 
    **/
    where?: FornecedorWhereInput
  }


  /**
   * Fornecedor upsert
   */
  export type FornecedorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * The filter to search for the Fornecedor to update in case it exists.
     * 
    **/
    where: FornecedorWhereUniqueInput
    /**
     * In case the Fornecedor found by the `where` argument doesn't exist, create a new Fornecedor with this data.
     * 
    **/
    create: XOR<FornecedorCreateInput, FornecedorUncheckedCreateInput>
    /**
     * In case the Fornecedor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FornecedorUpdateInput, FornecedorUncheckedUpdateInput>
  }


  /**
   * Fornecedor delete
   */
  export type FornecedorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
    /**
     * Filter which Fornecedor to delete.
     * 
    **/
    where: FornecedorWhereUniqueInput
  }


  /**
   * Fornecedor deleteMany
   */
  export type FornecedorDeleteManyArgs = {
    /**
     * Filter which Fornecedors to delete
     * 
    **/
    where?: FornecedorWhereInput
  }


  /**
   * Fornecedor.produtos
   */
  export type FornecedorProdutosArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    where?: ProdutoWhereInput
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Fornecedor without action
   */
  export type FornecedorArgs = {
    /**
     * Select specific fields to fetch from the Fornecedor
     * 
    **/
    select?: FornecedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FornecedorInclude | null
  }



  /**
   * Model Categoria_Produto
   */


  export type AggregateCategoria_Produto = {
    _count: Categoria_ProdutoCountAggregateOutputType | null
    _avg: Categoria_ProdutoAvgAggregateOutputType | null
    _sum: Categoria_ProdutoSumAggregateOutputType | null
    _min: Categoria_ProdutoMinAggregateOutputType | null
    _max: Categoria_ProdutoMaxAggregateOutputType | null
  }

  export type Categoria_ProdutoAvgAggregateOutputType = {
    categoria_id: number | null
  }

  export type Categoria_ProdutoSumAggregateOutputType = {
    categoria_id: number | null
  }

  export type Categoria_ProdutoMinAggregateOutputType = {
    categoria_id: number | null
    nome_categoria: string | null
  }

  export type Categoria_ProdutoMaxAggregateOutputType = {
    categoria_id: number | null
    nome_categoria: string | null
  }

  export type Categoria_ProdutoCountAggregateOutputType = {
    categoria_id: number
    nome_categoria: number
    _all: number
  }


  export type Categoria_ProdutoAvgAggregateInputType = {
    categoria_id?: true
  }

  export type Categoria_ProdutoSumAggregateInputType = {
    categoria_id?: true
  }

  export type Categoria_ProdutoMinAggregateInputType = {
    categoria_id?: true
    nome_categoria?: true
  }

  export type Categoria_ProdutoMaxAggregateInputType = {
    categoria_id?: true
    nome_categoria?: true
  }

  export type Categoria_ProdutoCountAggregateInputType = {
    categoria_id?: true
    nome_categoria?: true
    _all?: true
  }

  export type Categoria_ProdutoAggregateArgs = {
    /**
     * Filter which Categoria_Produto to aggregate.
     * 
    **/
    where?: Categoria_ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categoria_Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<Categoria_ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Categoria_ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categoria_Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categoria_Produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categoria_Produtos
    **/
    _count?: true | Categoria_ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Categoria_ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Categoria_ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Categoria_ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Categoria_ProdutoMaxAggregateInputType
  }

  export type GetCategoria_ProdutoAggregateType<T extends Categoria_ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria_Produto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria_Produto[P]>
      : GetScalarType<T[P], AggregateCategoria_Produto[P]>
  }




  export type Categoria_ProdutoGroupByArgs = {
    where?: Categoria_ProdutoWhereInput
    orderBy?: Enumerable<Categoria_ProdutoOrderByWithAggregationInput>
    by: Array<Categoria_ProdutoScalarFieldEnum>
    having?: Categoria_ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Categoria_ProdutoCountAggregateInputType | true
    _avg?: Categoria_ProdutoAvgAggregateInputType
    _sum?: Categoria_ProdutoSumAggregateInputType
    _min?: Categoria_ProdutoMinAggregateInputType
    _max?: Categoria_ProdutoMaxAggregateInputType
  }


  export type Categoria_ProdutoGroupByOutputType = {
    categoria_id: number
    nome_categoria: string
    _count: Categoria_ProdutoCountAggregateOutputType | null
    _avg: Categoria_ProdutoAvgAggregateOutputType | null
    _sum: Categoria_ProdutoSumAggregateOutputType | null
    _min: Categoria_ProdutoMinAggregateOutputType | null
    _max: Categoria_ProdutoMaxAggregateOutputType | null
  }

  type GetCategoria_ProdutoGroupByPayload<T extends Categoria_ProdutoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Categoria_ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Categoria_ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Categoria_ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], Categoria_ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type Categoria_ProdutoSelect = {
    categoria_id?: boolean
    nome_categoria?: boolean
    produtos?: boolean | Categoria_ProdutoProdutosArgs
    _count?: boolean | Categoria_ProdutoCountOutputTypeArgs
  }


  export type Categoria_ProdutoInclude = {
    produtos?: boolean | Categoria_ProdutoProdutosArgs
    _count?: boolean | Categoria_ProdutoCountOutputTypeArgs
  } 

  export type Categoria_ProdutoGetPayload<S extends boolean | null | undefined | Categoria_ProdutoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Categoria_Produto :
    S extends undefined ? never :
    S extends { include: any } & (Categoria_ProdutoArgs | Categoria_ProdutoFindManyArgs)
    ? Categoria_Produto  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'produtos' ? Array < ProdutoGetPayload<S['include'][P]>>  :
        P extends '_count' ? Categoria_ProdutoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Categoria_ProdutoArgs | Categoria_ProdutoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'produtos' ? Array < ProdutoGetPayload<S['select'][P]>>  :
        P extends '_count' ? Categoria_ProdutoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Categoria_Produto ? Categoria_Produto[P] : never
  } 
      : Categoria_Produto


  type Categoria_ProdutoCountArgs = Merge<
    Omit<Categoria_ProdutoFindManyArgs, 'select' | 'include'> & {
      select?: Categoria_ProdutoCountAggregateInputType | true
    }
  >

  export interface Categoria_ProdutoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Categoria_Produto that matches the filter.
     * @param {Categoria_ProdutoFindUniqueArgs} args - Arguments to find a Categoria_Produto
     * @example
     * // Get one Categoria_Produto
     * const categoria_Produto = await prisma.categoria_Produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Categoria_ProdutoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Categoria_ProdutoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Categoria_Produto'> extends True ? Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>> : Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T> | null, null>

    /**
     * Find one Categoria_Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Categoria_ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Categoria_Produto
     * @example
     * // Get one Categoria_Produto
     * const categoria_Produto = await prisma.categoria_Produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Categoria_ProdutoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Categoria_ProdutoFindUniqueOrThrowArgs>
    ): Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>>

    /**
     * Find the first Categoria_Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categoria_ProdutoFindFirstArgs} args - Arguments to find a Categoria_Produto
     * @example
     * // Get one Categoria_Produto
     * const categoria_Produto = await prisma.categoria_Produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Categoria_ProdutoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Categoria_ProdutoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Categoria_Produto'> extends True ? Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>> : Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T> | null, null>

    /**
     * Find the first Categoria_Produto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categoria_ProdutoFindFirstOrThrowArgs} args - Arguments to find a Categoria_Produto
     * @example
     * // Get one Categoria_Produto
     * const categoria_Produto = await prisma.categoria_Produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Categoria_ProdutoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Categoria_ProdutoFindFirstOrThrowArgs>
    ): Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>>

    /**
     * Find zero or more Categoria_Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categoria_ProdutoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categoria_Produtos
     * const categoria_Produtos = await prisma.categoria_Produto.findMany()
     * 
     * // Get first 10 Categoria_Produtos
     * const categoria_Produtos = await prisma.categoria_Produto.findMany({ take: 10 })
     * 
     * // Only select the `categoria_id`
     * const categoria_ProdutoWithCategoria_idOnly = await prisma.categoria_Produto.findMany({ select: { categoria_id: true } })
     * 
    **/
    findMany<T extends Categoria_ProdutoFindManyArgs>(
      args?: SelectSubset<T, Categoria_ProdutoFindManyArgs>
    ): PrismaPromise<Array<Categoria_ProdutoGetPayload<T>>>

    /**
     * Create a Categoria_Produto.
     * @param {Categoria_ProdutoCreateArgs} args - Arguments to create a Categoria_Produto.
     * @example
     * // Create one Categoria_Produto
     * const Categoria_Produto = await prisma.categoria_Produto.create({
     *   data: {
     *     // ... data to create a Categoria_Produto
     *   }
     * })
     * 
    **/
    create<T extends Categoria_ProdutoCreateArgs>(
      args: SelectSubset<T, Categoria_ProdutoCreateArgs>
    ): Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>>

    /**
     * Create many Categoria_Produtos.
     *     @param {Categoria_ProdutoCreateManyArgs} args - Arguments to create many Categoria_Produtos.
     *     @example
     *     // Create many Categoria_Produtos
     *     const categoria_Produto = await prisma.categoria_Produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Categoria_ProdutoCreateManyArgs>(
      args?: SelectSubset<T, Categoria_ProdutoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria_Produto.
     * @param {Categoria_ProdutoDeleteArgs} args - Arguments to delete one Categoria_Produto.
     * @example
     * // Delete one Categoria_Produto
     * const Categoria_Produto = await prisma.categoria_Produto.delete({
     *   where: {
     *     // ... filter to delete one Categoria_Produto
     *   }
     * })
     * 
    **/
    delete<T extends Categoria_ProdutoDeleteArgs>(
      args: SelectSubset<T, Categoria_ProdutoDeleteArgs>
    ): Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>>

    /**
     * Update one Categoria_Produto.
     * @param {Categoria_ProdutoUpdateArgs} args - Arguments to update one Categoria_Produto.
     * @example
     * // Update one Categoria_Produto
     * const categoria_Produto = await prisma.categoria_Produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Categoria_ProdutoUpdateArgs>(
      args: SelectSubset<T, Categoria_ProdutoUpdateArgs>
    ): Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>>

    /**
     * Delete zero or more Categoria_Produtos.
     * @param {Categoria_ProdutoDeleteManyArgs} args - Arguments to filter Categoria_Produtos to delete.
     * @example
     * // Delete a few Categoria_Produtos
     * const { count } = await prisma.categoria_Produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Categoria_ProdutoDeleteManyArgs>(
      args?: SelectSubset<T, Categoria_ProdutoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categoria_Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categoria_ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categoria_Produtos
     * const categoria_Produto = await prisma.categoria_Produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Categoria_ProdutoUpdateManyArgs>(
      args: SelectSubset<T, Categoria_ProdutoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria_Produto.
     * @param {Categoria_ProdutoUpsertArgs} args - Arguments to update or create a Categoria_Produto.
     * @example
     * // Update or create a Categoria_Produto
     * const categoria_Produto = await prisma.categoria_Produto.upsert({
     *   create: {
     *     // ... data to create a Categoria_Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria_Produto we want to update
     *   }
     * })
    **/
    upsert<T extends Categoria_ProdutoUpsertArgs>(
      args: SelectSubset<T, Categoria_ProdutoUpsertArgs>
    ): Prisma__Categoria_ProdutoClient<Categoria_ProdutoGetPayload<T>>

    /**
     * Count the number of Categoria_Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categoria_ProdutoCountArgs} args - Arguments to filter Categoria_Produtos to count.
     * @example
     * // Count the number of Categoria_Produtos
     * const count = await prisma.categoria_Produto.count({
     *   where: {
     *     // ... the filter for the Categoria_Produtos we want to count
     *   }
     * })
    **/
    count<T extends Categoria_ProdutoCountArgs>(
      args?: Subset<T, Categoria_ProdutoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Categoria_ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria_Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categoria_ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Categoria_ProdutoAggregateArgs>(args: Subset<T, Categoria_ProdutoAggregateArgs>): PrismaPromise<GetCategoria_ProdutoAggregateType<T>>

    /**
     * Group by Categoria_Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categoria_ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Categoria_ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Categoria_ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: Categoria_ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Categoria_ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoria_ProdutoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria_Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Categoria_ProdutoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produtos<T extends Categoria_ProdutoProdutosArgs= {}>(args?: Subset<T, Categoria_ProdutoProdutosArgs>): PrismaPromise<Array<ProdutoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Categoria_Produto base type for findUnique actions
   */
  export type Categoria_ProdutoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * Filter, which Categoria_Produto to fetch.
     * 
    **/
    where: Categoria_ProdutoWhereUniqueInput
  }

  /**
   * Categoria_Produto findUnique
   */
  export interface Categoria_ProdutoFindUniqueArgs extends Categoria_ProdutoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categoria_Produto findUniqueOrThrow
   */
  export type Categoria_ProdutoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * Filter, which Categoria_Produto to fetch.
     * 
    **/
    where: Categoria_ProdutoWhereUniqueInput
  }


  /**
   * Categoria_Produto base type for findFirst actions
   */
  export type Categoria_ProdutoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * Filter, which Categoria_Produto to fetch.
     * 
    **/
    where?: Categoria_ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categoria_Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<Categoria_ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categoria_Produtos.
     * 
    **/
    cursor?: Categoria_ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categoria_Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categoria_Produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categoria_Produtos.
     * 
    **/
    distinct?: Enumerable<Categoria_ProdutoScalarFieldEnum>
  }

  /**
   * Categoria_Produto findFirst
   */
  export interface Categoria_ProdutoFindFirstArgs extends Categoria_ProdutoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categoria_Produto findFirstOrThrow
   */
  export type Categoria_ProdutoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * Filter, which Categoria_Produto to fetch.
     * 
    **/
    where?: Categoria_ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categoria_Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<Categoria_ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categoria_Produtos.
     * 
    **/
    cursor?: Categoria_ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categoria_Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categoria_Produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categoria_Produtos.
     * 
    **/
    distinct?: Enumerable<Categoria_ProdutoScalarFieldEnum>
  }


  /**
   * Categoria_Produto findMany
   */
  export type Categoria_ProdutoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * Filter, which Categoria_Produtos to fetch.
     * 
    **/
    where?: Categoria_ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categoria_Produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<Categoria_ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categoria_Produtos.
     * 
    **/
    cursor?: Categoria_ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categoria_Produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categoria_Produtos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Categoria_ProdutoScalarFieldEnum>
  }


  /**
   * Categoria_Produto create
   */
  export type Categoria_ProdutoCreateArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * The data needed to create a Categoria_Produto.
     * 
    **/
    data: XOR<Categoria_ProdutoCreateInput, Categoria_ProdutoUncheckedCreateInput>
  }


  /**
   * Categoria_Produto createMany
   */
  export type Categoria_ProdutoCreateManyArgs = {
    /**
     * The data used to create many Categoria_Produtos.
     * 
    **/
    data: Enumerable<Categoria_ProdutoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Categoria_Produto update
   */
  export type Categoria_ProdutoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * The data needed to update a Categoria_Produto.
     * 
    **/
    data: XOR<Categoria_ProdutoUpdateInput, Categoria_ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Categoria_Produto to update.
     * 
    **/
    where: Categoria_ProdutoWhereUniqueInput
  }


  /**
   * Categoria_Produto updateMany
   */
  export type Categoria_ProdutoUpdateManyArgs = {
    /**
     * The data used to update Categoria_Produtos.
     * 
    **/
    data: XOR<Categoria_ProdutoUpdateManyMutationInput, Categoria_ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Categoria_Produtos to update
     * 
    **/
    where?: Categoria_ProdutoWhereInput
  }


  /**
   * Categoria_Produto upsert
   */
  export type Categoria_ProdutoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * The filter to search for the Categoria_Produto to update in case it exists.
     * 
    **/
    where: Categoria_ProdutoWhereUniqueInput
    /**
     * In case the Categoria_Produto found by the `where` argument doesn't exist, create a new Categoria_Produto with this data.
     * 
    **/
    create: XOR<Categoria_ProdutoCreateInput, Categoria_ProdutoUncheckedCreateInput>
    /**
     * In case the Categoria_Produto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Categoria_ProdutoUpdateInput, Categoria_ProdutoUncheckedUpdateInput>
  }


  /**
   * Categoria_Produto delete
   */
  export type Categoria_ProdutoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
    /**
     * Filter which Categoria_Produto to delete.
     * 
    **/
    where: Categoria_ProdutoWhereUniqueInput
  }


  /**
   * Categoria_Produto deleteMany
   */
  export type Categoria_ProdutoDeleteManyArgs = {
    /**
     * Filter which Categoria_Produtos to delete
     * 
    **/
    where?: Categoria_ProdutoWhereInput
  }


  /**
   * Categoria_Produto.produtos
   */
  export type Categoria_ProdutoProdutosArgs = {
    /**
     * Select specific fields to fetch from the Produto
     * 
    **/
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProdutoInclude | null
    where?: ProdutoWhereInput
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Categoria_Produto without action
   */
  export type Categoria_ProdutoArgs = {
    /**
     * Select specific fields to fetch from the Categoria_Produto
     * 
    **/
    select?: Categoria_ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Categoria_ProdutoInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Categoria_ProdutoScalarFieldEnum: {
    categoria_id: 'categoria_id',
    nome_categoria: 'nome_categoria'
  };

  export type Categoria_ProdutoScalarFieldEnum = (typeof Categoria_ProdutoScalarFieldEnum)[keyof typeof Categoria_ProdutoScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    cliente_id: 'cliente_id',
    nome: 'nome',
    telefone: 'telefone',
    email: 'email',
    endereco: 'endereco'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const FornecedorScalarFieldEnum: {
    fornecedor_id: 'fornecedor_id',
    nome_fornecedor: 'nome_fornecedor',
    telefone: 'telefone',
    email: 'email',
    endereco: 'endereco'
  };

  export type FornecedorScalarFieldEnum = (typeof FornecedorScalarFieldEnum)[keyof typeof FornecedorScalarFieldEnum]


  export const FuncionarioScalarFieldEnum: {
    funcionario_id: 'funcionario_id',
    nome_funcionario: 'nome_funcionario',
    cargo: 'cargo',
    telefone: 'telefone',
    email: 'email',
    endereco: 'endereco'
  };

  export type FuncionarioScalarFieldEnum = (typeof FuncionarioScalarFieldEnum)[keyof typeof FuncionarioScalarFieldEnum]


  export const Item_PedidoScalarFieldEnum: {
    item_pedido_id: 'item_pedido_id',
    data_pedido: 'data_pedido',
    valor_total: 'valor_total',
    produto_id: 'produto_id',
    pedido_id: 'pedido_id'
  };

  export type Item_PedidoScalarFieldEnum = (typeof Item_PedidoScalarFieldEnum)[keyof typeof Item_PedidoScalarFieldEnum]


  export const PedidoScalarFieldEnum: {
    pedido_id: 'pedido_id',
    data_pedido: 'data_pedido',
    valor_total: 'valor_total',
    cliente_id: 'cliente_id',
    funcionario_id: 'funcionario_id'
  };

  export type PedidoScalarFieldEnum = (typeof PedidoScalarFieldEnum)[keyof typeof PedidoScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    produto_id: 'produto_id',
    nome_produto: 'nome_produto',
    descricao: 'descricao',
    preco: 'preco',
    categoria_id: 'categoria_id',
    fornecedor_id: 'fornecedor_id'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type FuncionarioWhereInput = {
    AND?: Enumerable<FuncionarioWhereInput>
    OR?: Enumerable<FuncionarioWhereInput>
    NOT?: Enumerable<FuncionarioWhereInput>
    funcionario_id?: IntFilter | number
    nome_funcionario?: StringFilter | string
    cargo?: StringFilter | string
    telefone?: StringFilter | string
    email?: StringFilter | string
    endereco?: StringFilter | string
    pedidos?: PedidoListRelationFilter
  }

  export type FuncionarioOrderByWithRelationInput = {
    funcionario_id?: SortOrder
    nome_funcionario?: SortOrder
    cargo?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    pedidos?: PedidoOrderByRelationAggregateInput
  }

  export type FuncionarioWhereUniqueInput = {
    funcionario_id?: number
    email?: string
  }

  export type FuncionarioOrderByWithAggregationInput = {
    funcionario_id?: SortOrder
    nome_funcionario?: SortOrder
    cargo?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    _count?: FuncionarioCountOrderByAggregateInput
    _avg?: FuncionarioAvgOrderByAggregateInput
    _max?: FuncionarioMaxOrderByAggregateInput
    _min?: FuncionarioMinOrderByAggregateInput
    _sum?: FuncionarioSumOrderByAggregateInput
  }

  export type FuncionarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FuncionarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<FuncionarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FuncionarioScalarWhereWithAggregatesInput>
    funcionario_id?: IntWithAggregatesFilter | number
    nome_funcionario?: StringWithAggregatesFilter | string
    cargo?: StringWithAggregatesFilter | string
    telefone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
  }

  export type ClienteWhereInput = {
    AND?: Enumerable<ClienteWhereInput>
    OR?: Enumerable<ClienteWhereInput>
    NOT?: Enumerable<ClienteWhereInput>
    cliente_id?: IntFilter | number
    nome?: StringFilter | string
    telefone?: StringFilter | string
    email?: StringFilter | string
    endereco?: StringFilter | string
    pedidos?: PedidoListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    cliente_id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    pedidos?: PedidoOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = {
    cliente_id?: number
    email?: string
  }

  export type ClienteOrderByWithAggregationInput = {
    cliente_id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    cliente_id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    telefone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
  }

  export type PedidoWhereInput = {
    AND?: Enumerable<PedidoWhereInput>
    OR?: Enumerable<PedidoWhereInput>
    NOT?: Enumerable<PedidoWhereInput>
    pedido_id?: IntFilter | number
    data_pedido?: DateTimeFilter | Date | string
    valor_total?: FloatFilter | number
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    cliente_id?: IntFilter | number
    funcionario?: XOR<FuncionarioRelationFilter, FuncionarioWhereInput>
    funcionario_id?: IntFilter | number
    itens_pedido?: Item_PedidoListRelationFilter
  }

  export type PedidoOrderByWithRelationInput = {
    pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    cliente_id?: SortOrder
    funcionario?: FuncionarioOrderByWithRelationInput
    funcionario_id?: SortOrder
    itens_pedido?: Item_PedidoOrderByRelationAggregateInput
  }

  export type PedidoWhereUniqueInput = {
    pedido_id?: number
  }

  export type PedidoOrderByWithAggregationInput = {
    pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    cliente_id?: SortOrder
    funcionario_id?: SortOrder
    _count?: PedidoCountOrderByAggregateInput
    _avg?: PedidoAvgOrderByAggregateInput
    _max?: PedidoMaxOrderByAggregateInput
    _min?: PedidoMinOrderByAggregateInput
    _sum?: PedidoSumOrderByAggregateInput
  }

  export type PedidoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PedidoScalarWhereWithAggregatesInput>
    OR?: Enumerable<PedidoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PedidoScalarWhereWithAggregatesInput>
    pedido_id?: IntWithAggregatesFilter | number
    data_pedido?: DateTimeWithAggregatesFilter | Date | string
    valor_total?: FloatWithAggregatesFilter | number
    cliente_id?: IntWithAggregatesFilter | number
    funcionario_id?: IntWithAggregatesFilter | number
  }

  export type Item_PedidoWhereInput = {
    AND?: Enumerable<Item_PedidoWhereInput>
    OR?: Enumerable<Item_PedidoWhereInput>
    NOT?: Enumerable<Item_PedidoWhereInput>
    item_pedido_id?: IntFilter | number
    data_pedido?: DateTimeFilter | Date | string
    valor_total?: FloatFilter | number
    produto?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
    produto_id?: IntFilter | number
    pedido?: XOR<PedidoRelationFilter, PedidoWhereInput>
    pedido_id?: IntFilter | number
  }

  export type Item_PedidoOrderByWithRelationInput = {
    item_pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    produto?: ProdutoOrderByWithRelationInput
    produto_id?: SortOrder
    pedido?: PedidoOrderByWithRelationInput
    pedido_id?: SortOrder
  }

  export type Item_PedidoWhereUniqueInput = {
    item_pedido_id?: number
  }

  export type Item_PedidoOrderByWithAggregationInput = {
    item_pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    produto_id?: SortOrder
    pedido_id?: SortOrder
    _count?: Item_PedidoCountOrderByAggregateInput
    _avg?: Item_PedidoAvgOrderByAggregateInput
    _max?: Item_PedidoMaxOrderByAggregateInput
    _min?: Item_PedidoMinOrderByAggregateInput
    _sum?: Item_PedidoSumOrderByAggregateInput
  }

  export type Item_PedidoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Item_PedidoScalarWhereWithAggregatesInput>
    OR?: Enumerable<Item_PedidoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Item_PedidoScalarWhereWithAggregatesInput>
    item_pedido_id?: IntWithAggregatesFilter | number
    data_pedido?: DateTimeWithAggregatesFilter | Date | string
    valor_total?: FloatWithAggregatesFilter | number
    produto_id?: IntWithAggregatesFilter | number
    pedido_id?: IntWithAggregatesFilter | number
  }

  export type ProdutoWhereInput = {
    AND?: Enumerable<ProdutoWhereInput>
    OR?: Enumerable<ProdutoWhereInput>
    NOT?: Enumerable<ProdutoWhereInput>
    produto_id?: IntFilter | number
    nome_produto?: StringFilter | string
    descricao?: StringFilter | string
    preco?: FloatFilter | number
    categoria?: XOR<Categoria_ProdutoRelationFilter, Categoria_ProdutoWhereInput>
    categoria_id?: IntFilter | number
    fornecedor?: XOR<FornecedorRelationFilter, FornecedorWhereInput>
    fornecedor_id?: IntFilter | number
    itens_pedido?: Item_PedidoListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    produto_id?: SortOrder
    nome_produto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    categoria?: Categoria_ProdutoOrderByWithRelationInput
    categoria_id?: SortOrder
    fornecedor?: FornecedorOrderByWithRelationInput
    fornecedor_id?: SortOrder
    itens_pedido?: Item_PedidoOrderByRelationAggregateInput
  }

  export type ProdutoWhereUniqueInput = {
    produto_id?: number
    nome_produto?: string
  }

  export type ProdutoOrderByWithAggregationInput = {
    produto_id?: SortOrder
    nome_produto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    categoria_id?: SortOrder
    fornecedor_id?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    produto_id?: IntWithAggregatesFilter | number
    nome_produto?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
    preco?: FloatWithAggregatesFilter | number
    categoria_id?: IntWithAggregatesFilter | number
    fornecedor_id?: IntWithAggregatesFilter | number
  }

  export type FornecedorWhereInput = {
    AND?: Enumerable<FornecedorWhereInput>
    OR?: Enumerable<FornecedorWhereInput>
    NOT?: Enumerable<FornecedorWhereInput>
    fornecedor_id?: IntFilter | number
    nome_fornecedor?: StringFilter | string
    telefone?: StringFilter | string
    email?: StringFilter | string
    endereco?: StringFilter | string
    produtos?: ProdutoListRelationFilter
  }

  export type FornecedorOrderByWithRelationInput = {
    fornecedor_id?: SortOrder
    nome_fornecedor?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    produtos?: ProdutoOrderByRelationAggregateInput
  }

  export type FornecedorWhereUniqueInput = {
    fornecedor_id?: number
    email?: string
  }

  export type FornecedorOrderByWithAggregationInput = {
    fornecedor_id?: SortOrder
    nome_fornecedor?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    _count?: FornecedorCountOrderByAggregateInput
    _avg?: FornecedorAvgOrderByAggregateInput
    _max?: FornecedorMaxOrderByAggregateInput
    _min?: FornecedorMinOrderByAggregateInput
    _sum?: FornecedorSumOrderByAggregateInput
  }

  export type FornecedorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FornecedorScalarWhereWithAggregatesInput>
    OR?: Enumerable<FornecedorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FornecedorScalarWhereWithAggregatesInput>
    fornecedor_id?: IntWithAggregatesFilter | number
    nome_fornecedor?: StringWithAggregatesFilter | string
    telefone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
  }

  export type Categoria_ProdutoWhereInput = {
    AND?: Enumerable<Categoria_ProdutoWhereInput>
    OR?: Enumerable<Categoria_ProdutoWhereInput>
    NOT?: Enumerable<Categoria_ProdutoWhereInput>
    categoria_id?: IntFilter | number
    nome_categoria?: StringFilter | string
    produtos?: ProdutoListRelationFilter
  }

  export type Categoria_ProdutoOrderByWithRelationInput = {
    categoria_id?: SortOrder
    nome_categoria?: SortOrder
    produtos?: ProdutoOrderByRelationAggregateInput
  }

  export type Categoria_ProdutoWhereUniqueInput = {
    categoria_id?: number
    nome_categoria?: string
  }

  export type Categoria_ProdutoOrderByWithAggregationInput = {
    categoria_id?: SortOrder
    nome_categoria?: SortOrder
    _count?: Categoria_ProdutoCountOrderByAggregateInput
    _avg?: Categoria_ProdutoAvgOrderByAggregateInput
    _max?: Categoria_ProdutoMaxOrderByAggregateInput
    _min?: Categoria_ProdutoMinOrderByAggregateInput
    _sum?: Categoria_ProdutoSumOrderByAggregateInput
  }

  export type Categoria_ProdutoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Categoria_ProdutoScalarWhereWithAggregatesInput>
    OR?: Enumerable<Categoria_ProdutoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Categoria_ProdutoScalarWhereWithAggregatesInput>
    categoria_id?: IntWithAggregatesFilter | number
    nome_categoria?: StringWithAggregatesFilter | string
  }

  export type FuncionarioCreateInput = {
    nome_funcionario: string
    cargo: string
    telefone: string
    email: string
    endereco: string
    pedidos?: PedidoCreateNestedManyWithoutFuncionarioInput
  }

  export type FuncionarioUncheckedCreateInput = {
    funcionario_id?: number
    nome_funcionario: string
    cargo: string
    telefone: string
    email: string
    endereco: string
    pedidos?: PedidoUncheckedCreateNestedManyWithoutFuncionarioInput
  }

  export type FuncionarioUpdateInput = {
    nome_funcionario?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    pedidos?: PedidoUpdateManyWithoutFuncionarioNestedInput
  }

  export type FuncionarioUncheckedUpdateInput = {
    funcionario_id?: IntFieldUpdateOperationsInput | number
    nome_funcionario?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    pedidos?: PedidoUncheckedUpdateManyWithoutFuncionarioNestedInput
  }

  export type FuncionarioCreateManyInput = {
    funcionario_id?: number
    nome_funcionario: string
    cargo: string
    telefone: string
    email: string
    endereco: string
  }

  export type FuncionarioUpdateManyMutationInput = {
    nome_funcionario?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioUncheckedUpdateManyInput = {
    funcionario_id?: IntFieldUpdateOperationsInput | number
    nome_funcionario?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateInput = {
    nome: string
    telefone: string
    email: string
    endereco: string
    pedidos?: PedidoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    cliente_id?: number
    nome: string
    telefone: string
    email: string
    endereco: string
    pedidos?: PedidoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    pedidos?: PedidoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    pedidos?: PedidoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    cliente_id?: number
    nome: string
    telefone: string
    email: string
    endereco: string
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type PedidoCreateInput = {
    data_pedido: Date | string
    valor_total: number
    cliente: ClienteCreateNestedOneWithoutPedidosInput
    funcionario: FuncionarioCreateNestedOneWithoutPedidosInput
    itens_pedido?: Item_PedidoCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateInput = {
    pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    cliente_id: number
    funcionario_id: number
    itens_pedido?: Item_PedidoUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUpdateInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutPedidosNestedInput
    funcionario?: FuncionarioUpdateOneRequiredWithoutPedidosNestedInput
    itens_pedido?: Item_PedidoUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    funcionario_id?: IntFieldUpdateOperationsInput | number
    itens_pedido?: Item_PedidoUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoCreateManyInput = {
    pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    cliente_id: number
    funcionario_id: number
  }

  export type PedidoUpdateManyMutationInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
  }

  export type PedidoUncheckedUpdateManyInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    funcionario_id?: IntFieldUpdateOperationsInput | number
  }

  export type Item_PedidoCreateInput = {
    data_pedido: Date | string
    valor_total: number
    produto: ProdutoCreateNestedOneWithoutItens_pedidoInput
    pedido: PedidoCreateNestedOneWithoutItens_pedidoInput
  }

  export type Item_PedidoUncheckedCreateInput = {
    item_pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    produto_id: number
    pedido_id: number
  }

  export type Item_PedidoUpdateInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    produto?: ProdutoUpdateOneRequiredWithoutItens_pedidoNestedInput
    pedido?: PedidoUpdateOneRequiredWithoutItens_pedidoNestedInput
  }

  export type Item_PedidoUncheckedUpdateInput = {
    item_pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
    pedido_id?: IntFieldUpdateOperationsInput | number
  }

  export type Item_PedidoCreateManyInput = {
    item_pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    produto_id: number
    pedido_id: number
  }

  export type Item_PedidoUpdateManyMutationInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
  }

  export type Item_PedidoUncheckedUpdateManyInput = {
    item_pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
    pedido_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateInput = {
    nome_produto: string
    descricao: string
    preco: number
    categoria: Categoria_ProdutoCreateNestedOneWithoutProdutosInput
    fornecedor: FornecedorCreateNestedOneWithoutProdutosInput
    itens_pedido?: Item_PedidoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateInput = {
    produto_id?: number
    nome_produto: string
    descricao: string
    preco: number
    categoria_id: number
    fornecedor_id: number
    itens_pedido?: Item_PedidoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUpdateInput = {
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria?: Categoria_ProdutoUpdateOneRequiredWithoutProdutosNestedInput
    fornecedor?: FornecedorUpdateOneRequiredWithoutProdutosNestedInput
    itens_pedido?: Item_PedidoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    fornecedor_id?: IntFieldUpdateOperationsInput | number
    itens_pedido?: Item_PedidoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoCreateManyInput = {
    produto_id?: number
    nome_produto: string
    descricao: string
    preco: number
    categoria_id: number
    fornecedor_id: number
  }

  export type ProdutoUpdateManyMutationInput = {
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutoUncheckedUpdateManyInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    fornecedor_id?: IntFieldUpdateOperationsInput | number
  }

  export type FornecedorCreateInput = {
    nome_fornecedor: string
    telefone: string
    email: string
    endereco: string
    produtos?: ProdutoCreateNestedManyWithoutFornecedorInput
  }

  export type FornecedorUncheckedCreateInput = {
    fornecedor_id?: number
    nome_fornecedor: string
    telefone: string
    email: string
    endereco: string
    produtos?: ProdutoUncheckedCreateNestedManyWithoutFornecedorInput
  }

  export type FornecedorUpdateInput = {
    nome_fornecedor?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUpdateManyWithoutFornecedorNestedInput
  }

  export type FornecedorUncheckedUpdateInput = {
    fornecedor_id?: IntFieldUpdateOperationsInput | number
    nome_fornecedor?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUncheckedUpdateManyWithoutFornecedorNestedInput
  }

  export type FornecedorCreateManyInput = {
    fornecedor_id?: number
    nome_fornecedor: string
    telefone: string
    email: string
    endereco: string
  }

  export type FornecedorUpdateManyMutationInput = {
    nome_fornecedor?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type FornecedorUncheckedUpdateManyInput = {
    fornecedor_id?: IntFieldUpdateOperationsInput | number
    nome_fornecedor?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type Categoria_ProdutoCreateInput = {
    nome_categoria: string
    produtos?: ProdutoCreateNestedManyWithoutCategoriaInput
  }

  export type Categoria_ProdutoUncheckedCreateInput = {
    categoria_id?: number
    nome_categoria: string
    produtos?: ProdutoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type Categoria_ProdutoUpdateInput = {
    nome_categoria?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUpdateManyWithoutCategoriaNestedInput
  }

  export type Categoria_ProdutoUncheckedUpdateInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    nome_categoria?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type Categoria_ProdutoCreateManyInput = {
    categoria_id?: number
    nome_categoria: string
  }

  export type Categoria_ProdutoUpdateManyMutationInput = {
    nome_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type Categoria_ProdutoUncheckedUpdateManyInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    nome_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type PedidoListRelationFilter = {
    every?: PedidoWhereInput
    some?: PedidoWhereInput
    none?: PedidoWhereInput
  }

  export type PedidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FuncionarioCountOrderByAggregateInput = {
    funcionario_id?: SortOrder
    nome_funcionario?: SortOrder
    cargo?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type FuncionarioAvgOrderByAggregateInput = {
    funcionario_id?: SortOrder
  }

  export type FuncionarioMaxOrderByAggregateInput = {
    funcionario_id?: SortOrder
    nome_funcionario?: SortOrder
    cargo?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type FuncionarioMinOrderByAggregateInput = {
    funcionario_id?: SortOrder
    nome_funcionario?: SortOrder
    cargo?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type FuncionarioSumOrderByAggregateInput = {
    funcionario_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type ClienteCountOrderByAggregateInput = {
    cliente_id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    cliente_id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    cliente_id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    cliente_id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    cliente_id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ClienteRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type FuncionarioRelationFilter = {
    is?: FuncionarioWhereInput
    isNot?: FuncionarioWhereInput
  }

  export type Item_PedidoListRelationFilter = {
    every?: Item_PedidoWhereInput
    some?: Item_PedidoWhereInput
    none?: Item_PedidoWhereInput
  }

  export type Item_PedidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PedidoCountOrderByAggregateInput = {
    pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    cliente_id?: SortOrder
    funcionario_id?: SortOrder
  }

  export type PedidoAvgOrderByAggregateInput = {
    pedido_id?: SortOrder
    valor_total?: SortOrder
    cliente_id?: SortOrder
    funcionario_id?: SortOrder
  }

  export type PedidoMaxOrderByAggregateInput = {
    pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    cliente_id?: SortOrder
    funcionario_id?: SortOrder
  }

  export type PedidoMinOrderByAggregateInput = {
    pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    cliente_id?: SortOrder
    funcionario_id?: SortOrder
  }

  export type PedidoSumOrderByAggregateInput = {
    pedido_id?: SortOrder
    valor_total?: SortOrder
    cliente_id?: SortOrder
    funcionario_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type ProdutoRelationFilter = {
    is?: ProdutoWhereInput
    isNot?: ProdutoWhereInput
  }

  export type PedidoRelationFilter = {
    is?: PedidoWhereInput
    isNot?: PedidoWhereInput
  }

  export type Item_PedidoCountOrderByAggregateInput = {
    item_pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    produto_id?: SortOrder
    pedido_id?: SortOrder
  }

  export type Item_PedidoAvgOrderByAggregateInput = {
    item_pedido_id?: SortOrder
    valor_total?: SortOrder
    produto_id?: SortOrder
    pedido_id?: SortOrder
  }

  export type Item_PedidoMaxOrderByAggregateInput = {
    item_pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    produto_id?: SortOrder
    pedido_id?: SortOrder
  }

  export type Item_PedidoMinOrderByAggregateInput = {
    item_pedido_id?: SortOrder
    data_pedido?: SortOrder
    valor_total?: SortOrder
    produto_id?: SortOrder
    pedido_id?: SortOrder
  }

  export type Item_PedidoSumOrderByAggregateInput = {
    item_pedido_id?: SortOrder
    valor_total?: SortOrder
    produto_id?: SortOrder
    pedido_id?: SortOrder
  }

  export type Categoria_ProdutoRelationFilter = {
    is?: Categoria_ProdutoWhereInput
    isNot?: Categoria_ProdutoWhereInput
  }

  export type FornecedorRelationFilter = {
    is?: FornecedorWhereInput
    isNot?: FornecedorWhereInput
  }

  export type ProdutoCountOrderByAggregateInput = {
    produto_id?: SortOrder
    nome_produto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    categoria_id?: SortOrder
    fornecedor_id?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    produto_id?: SortOrder
    preco?: SortOrder
    categoria_id?: SortOrder
    fornecedor_id?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    produto_id?: SortOrder
    nome_produto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    categoria_id?: SortOrder
    fornecedor_id?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    produto_id?: SortOrder
    nome_produto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    categoria_id?: SortOrder
    fornecedor_id?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    produto_id?: SortOrder
    preco?: SortOrder
    categoria_id?: SortOrder
    fornecedor_id?: SortOrder
  }

  export type ProdutoListRelationFilter = {
    every?: ProdutoWhereInput
    some?: ProdutoWhereInput
    none?: ProdutoWhereInput
  }

  export type ProdutoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FornecedorCountOrderByAggregateInput = {
    fornecedor_id?: SortOrder
    nome_fornecedor?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type FornecedorAvgOrderByAggregateInput = {
    fornecedor_id?: SortOrder
  }

  export type FornecedorMaxOrderByAggregateInput = {
    fornecedor_id?: SortOrder
    nome_fornecedor?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type FornecedorMinOrderByAggregateInput = {
    fornecedor_id?: SortOrder
    nome_fornecedor?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
  }

  export type FornecedorSumOrderByAggregateInput = {
    fornecedor_id?: SortOrder
  }

  export type Categoria_ProdutoCountOrderByAggregateInput = {
    categoria_id?: SortOrder
    nome_categoria?: SortOrder
  }

  export type Categoria_ProdutoAvgOrderByAggregateInput = {
    categoria_id?: SortOrder
  }

  export type Categoria_ProdutoMaxOrderByAggregateInput = {
    categoria_id?: SortOrder
    nome_categoria?: SortOrder
  }

  export type Categoria_ProdutoMinOrderByAggregateInput = {
    categoria_id?: SortOrder
    nome_categoria?: SortOrder
  }

  export type Categoria_ProdutoSumOrderByAggregateInput = {
    categoria_id?: SortOrder
  }

  export type PedidoCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFuncionarioInput>, Enumerable<PedidoUncheckedCreateWithoutFuncionarioInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFuncionarioInput>
    createMany?: PedidoCreateManyFuncionarioInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type PedidoUncheckedCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFuncionarioInput>, Enumerable<PedidoUncheckedCreateWithoutFuncionarioInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFuncionarioInput>
    createMany?: PedidoCreateManyFuncionarioInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PedidoUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFuncionarioInput>, Enumerable<PedidoUncheckedCreateWithoutFuncionarioInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFuncionarioInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutFuncionarioInput>
    createMany?: PedidoCreateManyFuncionarioInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutFuncionarioInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutFuncionarioInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PedidoUncheckedUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFuncionarioInput>, Enumerable<PedidoUncheckedCreateWithoutFuncionarioInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFuncionarioInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutFuncionarioInput>
    createMany?: PedidoCreateManyFuncionarioInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutFuncionarioInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutFuncionarioInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type PedidoCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutClienteInput>, Enumerable<PedidoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutClienteInput>
    createMany?: PedidoCreateManyClienteInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type PedidoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutClienteInput>, Enumerable<PedidoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutClienteInput>
    createMany?: PedidoCreateManyClienteInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type PedidoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutClienteInput>, Enumerable<PedidoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: PedidoCreateManyClienteInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type PedidoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutClienteInput>, Enumerable<PedidoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: PedidoCreateManyClienteInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type ClienteCreateNestedOneWithoutPedidosInput = {
    create?: XOR<ClienteCreateWithoutPedidosInput, ClienteUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutPedidosInput
    connect?: ClienteWhereUniqueInput
  }

  export type FuncionarioCreateNestedOneWithoutPedidosInput = {
    create?: XOR<FuncionarioCreateWithoutPedidosInput, FuncionarioUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutPedidosInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type Item_PedidoCreateNestedManyWithoutPedidoInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutPedidoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutPedidoInput>
    createMany?: Item_PedidoCreateManyPedidoInputEnvelope
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
  }

  export type Item_PedidoUncheckedCreateNestedManyWithoutPedidoInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutPedidoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutPedidoInput>
    createMany?: Item_PedidoCreateManyPedidoInputEnvelope
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteUpdateOneRequiredWithoutPedidosNestedInput = {
    create?: XOR<ClienteCreateWithoutPedidosInput, ClienteUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutPedidosInput
    upsert?: ClienteUpsertWithoutPedidosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutPedidosInput, ClienteUncheckedUpdateWithoutPedidosInput>
  }

  export type FuncionarioUpdateOneRequiredWithoutPedidosNestedInput = {
    create?: XOR<FuncionarioCreateWithoutPedidosInput, FuncionarioUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutPedidosInput
    upsert?: FuncionarioUpsertWithoutPedidosInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<FuncionarioUpdateWithoutPedidosInput, FuncionarioUncheckedUpdateWithoutPedidosInput>
  }

  export type Item_PedidoUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutPedidoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutPedidoInput>
    upsert?: Enumerable<Item_PedidoUpsertWithWhereUniqueWithoutPedidoInput>
    createMany?: Item_PedidoCreateManyPedidoInputEnvelope
    set?: Enumerable<Item_PedidoWhereUniqueInput>
    disconnect?: Enumerable<Item_PedidoWhereUniqueInput>
    delete?: Enumerable<Item_PedidoWhereUniqueInput>
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
    update?: Enumerable<Item_PedidoUpdateWithWhereUniqueWithoutPedidoInput>
    updateMany?: Enumerable<Item_PedidoUpdateManyWithWhereWithoutPedidoInput>
    deleteMany?: Enumerable<Item_PedidoScalarWhereInput>
  }

  export type Item_PedidoUncheckedUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutPedidoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutPedidoInput>
    upsert?: Enumerable<Item_PedidoUpsertWithWhereUniqueWithoutPedidoInput>
    createMany?: Item_PedidoCreateManyPedidoInputEnvelope
    set?: Enumerable<Item_PedidoWhereUniqueInput>
    disconnect?: Enumerable<Item_PedidoWhereUniqueInput>
    delete?: Enumerable<Item_PedidoWhereUniqueInput>
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
    update?: Enumerable<Item_PedidoUpdateWithWhereUniqueWithoutPedidoInput>
    updateMany?: Enumerable<Item_PedidoUpdateManyWithWhereWithoutPedidoInput>
    deleteMany?: Enumerable<Item_PedidoScalarWhereInput>
  }

  export type ProdutoCreateNestedOneWithoutItens_pedidoInput = {
    create?: XOR<ProdutoCreateWithoutItens_pedidoInput, ProdutoUncheckedCreateWithoutItens_pedidoInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutItens_pedidoInput
    connect?: ProdutoWhereUniqueInput
  }

  export type PedidoCreateNestedOneWithoutItens_pedidoInput = {
    create?: XOR<PedidoCreateWithoutItens_pedidoInput, PedidoUncheckedCreateWithoutItens_pedidoInput>
    connectOrCreate?: PedidoCreateOrConnectWithoutItens_pedidoInput
    connect?: PedidoWhereUniqueInput
  }

  export type ProdutoUpdateOneRequiredWithoutItens_pedidoNestedInput = {
    create?: XOR<ProdutoCreateWithoutItens_pedidoInput, ProdutoUncheckedCreateWithoutItens_pedidoInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutItens_pedidoInput
    upsert?: ProdutoUpsertWithoutItens_pedidoInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<ProdutoUpdateWithoutItens_pedidoInput, ProdutoUncheckedUpdateWithoutItens_pedidoInput>
  }

  export type PedidoUpdateOneRequiredWithoutItens_pedidoNestedInput = {
    create?: XOR<PedidoCreateWithoutItens_pedidoInput, PedidoUncheckedCreateWithoutItens_pedidoInput>
    connectOrCreate?: PedidoCreateOrConnectWithoutItens_pedidoInput
    upsert?: PedidoUpsertWithoutItens_pedidoInput
    connect?: PedidoWhereUniqueInput
    update?: XOR<PedidoUpdateWithoutItens_pedidoInput, PedidoUncheckedUpdateWithoutItens_pedidoInput>
  }

  export type Categoria_ProdutoCreateNestedOneWithoutProdutosInput = {
    create?: XOR<Categoria_ProdutoCreateWithoutProdutosInput, Categoria_ProdutoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: Categoria_ProdutoCreateOrConnectWithoutProdutosInput
    connect?: Categoria_ProdutoWhereUniqueInput
  }

  export type FornecedorCreateNestedOneWithoutProdutosInput = {
    create?: XOR<FornecedorCreateWithoutProdutosInput, FornecedorUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: FornecedorCreateOrConnectWithoutProdutosInput
    connect?: FornecedorWhereUniqueInput
  }

  export type Item_PedidoCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutProdutoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutProdutoInput>
    createMany?: Item_PedidoCreateManyProdutoInputEnvelope
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
  }

  export type Item_PedidoUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutProdutoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutProdutoInput>
    createMany?: Item_PedidoCreateManyProdutoInputEnvelope
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
  }

  export type Categoria_ProdutoUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<Categoria_ProdutoCreateWithoutProdutosInput, Categoria_ProdutoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: Categoria_ProdutoCreateOrConnectWithoutProdutosInput
    upsert?: Categoria_ProdutoUpsertWithoutProdutosInput
    connect?: Categoria_ProdutoWhereUniqueInput
    update?: XOR<Categoria_ProdutoUpdateWithoutProdutosInput, Categoria_ProdutoUncheckedUpdateWithoutProdutosInput>
  }

  export type FornecedorUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<FornecedorCreateWithoutProdutosInput, FornecedorUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: FornecedorCreateOrConnectWithoutProdutosInput
    upsert?: FornecedorUpsertWithoutProdutosInput
    connect?: FornecedorWhereUniqueInput
    update?: XOR<FornecedorUpdateWithoutProdutosInput, FornecedorUncheckedUpdateWithoutProdutosInput>
  }

  export type Item_PedidoUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutProdutoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<Item_PedidoUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: Item_PedidoCreateManyProdutoInputEnvelope
    set?: Enumerable<Item_PedidoWhereUniqueInput>
    disconnect?: Enumerable<Item_PedidoWhereUniqueInput>
    delete?: Enumerable<Item_PedidoWhereUniqueInput>
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
    update?: Enumerable<Item_PedidoUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<Item_PedidoUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<Item_PedidoScalarWhereInput>
  }

  export type Item_PedidoUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<Enumerable<Item_PedidoCreateWithoutProdutoInput>, Enumerable<Item_PedidoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<Item_PedidoCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<Item_PedidoUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: Item_PedidoCreateManyProdutoInputEnvelope
    set?: Enumerable<Item_PedidoWhereUniqueInput>
    disconnect?: Enumerable<Item_PedidoWhereUniqueInput>
    delete?: Enumerable<Item_PedidoWhereUniqueInput>
    connect?: Enumerable<Item_PedidoWhereUniqueInput>
    update?: Enumerable<Item_PedidoUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<Item_PedidoUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<Item_PedidoScalarWhereInput>
  }

  export type ProdutoCreateNestedManyWithoutFornecedorInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutFornecedorInput>, Enumerable<ProdutoUncheckedCreateWithoutFornecedorInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutFornecedorInput>
    createMany?: ProdutoCreateManyFornecedorInputEnvelope
    connect?: Enumerable<ProdutoWhereUniqueInput>
  }

  export type ProdutoUncheckedCreateNestedManyWithoutFornecedorInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutFornecedorInput>, Enumerable<ProdutoUncheckedCreateWithoutFornecedorInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutFornecedorInput>
    createMany?: ProdutoCreateManyFornecedorInputEnvelope
    connect?: Enumerable<ProdutoWhereUniqueInput>
  }

  export type ProdutoUpdateManyWithoutFornecedorNestedInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutFornecedorInput>, Enumerable<ProdutoUncheckedCreateWithoutFornecedorInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutFornecedorInput>
    upsert?: Enumerable<ProdutoUpsertWithWhereUniqueWithoutFornecedorInput>
    createMany?: ProdutoCreateManyFornecedorInputEnvelope
    set?: Enumerable<ProdutoWhereUniqueInput>
    disconnect?: Enumerable<ProdutoWhereUniqueInput>
    delete?: Enumerable<ProdutoWhereUniqueInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
    update?: Enumerable<ProdutoUpdateWithWhereUniqueWithoutFornecedorInput>
    updateMany?: Enumerable<ProdutoUpdateManyWithWhereWithoutFornecedorInput>
    deleteMany?: Enumerable<ProdutoScalarWhereInput>
  }

  export type ProdutoUncheckedUpdateManyWithoutFornecedorNestedInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutFornecedorInput>, Enumerable<ProdutoUncheckedCreateWithoutFornecedorInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutFornecedorInput>
    upsert?: Enumerable<ProdutoUpsertWithWhereUniqueWithoutFornecedorInput>
    createMany?: ProdutoCreateManyFornecedorInputEnvelope
    set?: Enumerable<ProdutoWhereUniqueInput>
    disconnect?: Enumerable<ProdutoWhereUniqueInput>
    delete?: Enumerable<ProdutoWhereUniqueInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
    update?: Enumerable<ProdutoUpdateWithWhereUniqueWithoutFornecedorInput>
    updateMany?: Enumerable<ProdutoUpdateManyWithWhereWithoutFornecedorInput>
    deleteMany?: Enumerable<ProdutoScalarWhereInput>
  }

  export type ProdutoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutCategoriaInput>, Enumerable<ProdutoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutCategoriaInput>
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    connect?: Enumerable<ProdutoWhereUniqueInput>
  }

  export type ProdutoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutCategoriaInput>, Enumerable<ProdutoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutCategoriaInput>
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    connect?: Enumerable<ProdutoWhereUniqueInput>
  }

  export type ProdutoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutCategoriaInput>, Enumerable<ProdutoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutCategoriaInput>
    upsert?: Enumerable<ProdutoUpsertWithWhereUniqueWithoutCategoriaInput>
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    set?: Enumerable<ProdutoWhereUniqueInput>
    disconnect?: Enumerable<ProdutoWhereUniqueInput>
    delete?: Enumerable<ProdutoWhereUniqueInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
    update?: Enumerable<ProdutoUpdateWithWhereUniqueWithoutCategoriaInput>
    updateMany?: Enumerable<ProdutoUpdateManyWithWhereWithoutCategoriaInput>
    deleteMany?: Enumerable<ProdutoScalarWhereInput>
  }

  export type ProdutoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutCategoriaInput>, Enumerable<ProdutoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutCategoriaInput>
    upsert?: Enumerable<ProdutoUpsertWithWhereUniqueWithoutCategoriaInput>
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    set?: Enumerable<ProdutoWhereUniqueInput>
    disconnect?: Enumerable<ProdutoWhereUniqueInput>
    delete?: Enumerable<ProdutoWhereUniqueInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
    update?: Enumerable<ProdutoUpdateWithWhereUniqueWithoutCategoriaInput>
    updateMany?: Enumerable<ProdutoUpdateManyWithWhereWithoutCategoriaInput>
    deleteMany?: Enumerable<ProdutoScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type PedidoCreateWithoutFuncionarioInput = {
    data_pedido: Date | string
    valor_total: number
    cliente: ClienteCreateNestedOneWithoutPedidosInput
    itens_pedido?: Item_PedidoCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateWithoutFuncionarioInput = {
    pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    cliente_id: number
    itens_pedido?: Item_PedidoUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoCreateOrConnectWithoutFuncionarioInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutFuncionarioInput, PedidoUncheckedCreateWithoutFuncionarioInput>
  }

  export type PedidoCreateManyFuncionarioInputEnvelope = {
    data: Enumerable<PedidoCreateManyFuncionarioInput>
    skipDuplicates?: boolean
  }

  export type PedidoUpsertWithWhereUniqueWithoutFuncionarioInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutFuncionarioInput, PedidoUncheckedUpdateWithoutFuncionarioInput>
    create: XOR<PedidoCreateWithoutFuncionarioInput, PedidoUncheckedCreateWithoutFuncionarioInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutFuncionarioInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutFuncionarioInput, PedidoUncheckedUpdateWithoutFuncionarioInput>
  }

  export type PedidoUpdateManyWithWhereWithoutFuncionarioInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutPedidosInput>
  }

  export type PedidoScalarWhereInput = {
    AND?: Enumerable<PedidoScalarWhereInput>
    OR?: Enumerable<PedidoScalarWhereInput>
    NOT?: Enumerable<PedidoScalarWhereInput>
    pedido_id?: IntFilter | number
    data_pedido?: DateTimeFilter | Date | string
    valor_total?: FloatFilter | number
    cliente_id?: IntFilter | number
    funcionario_id?: IntFilter | number
  }

  export type PedidoCreateWithoutClienteInput = {
    data_pedido: Date | string
    valor_total: number
    funcionario: FuncionarioCreateNestedOneWithoutPedidosInput
    itens_pedido?: Item_PedidoCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateWithoutClienteInput = {
    pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    funcionario_id: number
    itens_pedido?: Item_PedidoUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoCreateOrConnectWithoutClienteInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput>
  }

  export type PedidoCreateManyClienteInputEnvelope = {
    data: Enumerable<PedidoCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type PedidoUpsertWithWhereUniqueWithoutClienteInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutClienteInput, PedidoUncheckedUpdateWithoutClienteInput>
    create: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutClienteInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutClienteInput, PedidoUncheckedUpdateWithoutClienteInput>
  }

  export type PedidoUpdateManyWithWhereWithoutClienteInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutPedidosInput>
  }

  export type ClienteCreateWithoutPedidosInput = {
    nome: string
    telefone: string
    email: string
    endereco: string
  }

  export type ClienteUncheckedCreateWithoutPedidosInput = {
    cliente_id?: number
    nome: string
    telefone: string
    email: string
    endereco: string
  }

  export type ClienteCreateOrConnectWithoutPedidosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutPedidosInput, ClienteUncheckedCreateWithoutPedidosInput>
  }

  export type FuncionarioCreateWithoutPedidosInput = {
    nome_funcionario: string
    cargo: string
    telefone: string
    email: string
    endereco: string
  }

  export type FuncionarioUncheckedCreateWithoutPedidosInput = {
    funcionario_id?: number
    nome_funcionario: string
    cargo: string
    telefone: string
    email: string
    endereco: string
  }

  export type FuncionarioCreateOrConnectWithoutPedidosInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutPedidosInput, FuncionarioUncheckedCreateWithoutPedidosInput>
  }

  export type Item_PedidoCreateWithoutPedidoInput = {
    data_pedido: Date | string
    valor_total: number
    produto: ProdutoCreateNestedOneWithoutItens_pedidoInput
  }

  export type Item_PedidoUncheckedCreateWithoutPedidoInput = {
    item_pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    produto_id: number
  }

  export type Item_PedidoCreateOrConnectWithoutPedidoInput = {
    where: Item_PedidoWhereUniqueInput
    create: XOR<Item_PedidoCreateWithoutPedidoInput, Item_PedidoUncheckedCreateWithoutPedidoInput>
  }

  export type Item_PedidoCreateManyPedidoInputEnvelope = {
    data: Enumerable<Item_PedidoCreateManyPedidoInput>
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithoutPedidosInput = {
    update: XOR<ClienteUpdateWithoutPedidosInput, ClienteUncheckedUpdateWithoutPedidosInput>
    create: XOR<ClienteCreateWithoutPedidosInput, ClienteUncheckedCreateWithoutPedidosInput>
  }

  export type ClienteUpdateWithoutPedidosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateWithoutPedidosInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioUpsertWithoutPedidosInput = {
    update: XOR<FuncionarioUpdateWithoutPedidosInput, FuncionarioUncheckedUpdateWithoutPedidosInput>
    create: XOR<FuncionarioCreateWithoutPedidosInput, FuncionarioUncheckedCreateWithoutPedidosInput>
  }

  export type FuncionarioUpdateWithoutPedidosInput = {
    nome_funcionario?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioUncheckedUpdateWithoutPedidosInput = {
    funcionario_id?: IntFieldUpdateOperationsInput | number
    nome_funcionario?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type Item_PedidoUpsertWithWhereUniqueWithoutPedidoInput = {
    where: Item_PedidoWhereUniqueInput
    update: XOR<Item_PedidoUpdateWithoutPedidoInput, Item_PedidoUncheckedUpdateWithoutPedidoInput>
    create: XOR<Item_PedidoCreateWithoutPedidoInput, Item_PedidoUncheckedCreateWithoutPedidoInput>
  }

  export type Item_PedidoUpdateWithWhereUniqueWithoutPedidoInput = {
    where: Item_PedidoWhereUniqueInput
    data: XOR<Item_PedidoUpdateWithoutPedidoInput, Item_PedidoUncheckedUpdateWithoutPedidoInput>
  }

  export type Item_PedidoUpdateManyWithWhereWithoutPedidoInput = {
    where: Item_PedidoScalarWhereInput
    data: XOR<Item_PedidoUpdateManyMutationInput, Item_PedidoUncheckedUpdateManyWithoutItens_pedidoInput>
  }

  export type Item_PedidoScalarWhereInput = {
    AND?: Enumerable<Item_PedidoScalarWhereInput>
    OR?: Enumerable<Item_PedidoScalarWhereInput>
    NOT?: Enumerable<Item_PedidoScalarWhereInput>
    item_pedido_id?: IntFilter | number
    data_pedido?: DateTimeFilter | Date | string
    valor_total?: FloatFilter | number
    produto_id?: IntFilter | number
    pedido_id?: IntFilter | number
  }

  export type ProdutoCreateWithoutItens_pedidoInput = {
    nome_produto: string
    descricao: string
    preco: number
    categoria: Categoria_ProdutoCreateNestedOneWithoutProdutosInput
    fornecedor: FornecedorCreateNestedOneWithoutProdutosInput
  }

  export type ProdutoUncheckedCreateWithoutItens_pedidoInput = {
    produto_id?: number
    nome_produto: string
    descricao: string
    preco: number
    categoria_id: number
    fornecedor_id: number
  }

  export type ProdutoCreateOrConnectWithoutItens_pedidoInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutItens_pedidoInput, ProdutoUncheckedCreateWithoutItens_pedidoInput>
  }

  export type PedidoCreateWithoutItens_pedidoInput = {
    data_pedido: Date | string
    valor_total: number
    cliente: ClienteCreateNestedOneWithoutPedidosInput
    funcionario: FuncionarioCreateNestedOneWithoutPedidosInput
  }

  export type PedidoUncheckedCreateWithoutItens_pedidoInput = {
    pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    cliente_id: number
    funcionario_id: number
  }

  export type PedidoCreateOrConnectWithoutItens_pedidoInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutItens_pedidoInput, PedidoUncheckedCreateWithoutItens_pedidoInput>
  }

  export type ProdutoUpsertWithoutItens_pedidoInput = {
    update: XOR<ProdutoUpdateWithoutItens_pedidoInput, ProdutoUncheckedUpdateWithoutItens_pedidoInput>
    create: XOR<ProdutoCreateWithoutItens_pedidoInput, ProdutoUncheckedCreateWithoutItens_pedidoInput>
  }

  export type ProdutoUpdateWithoutItens_pedidoInput = {
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria?: Categoria_ProdutoUpdateOneRequiredWithoutProdutosNestedInput
    fornecedor?: FornecedorUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutItens_pedidoInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    fornecedor_id?: IntFieldUpdateOperationsInput | number
  }

  export type PedidoUpsertWithoutItens_pedidoInput = {
    update: XOR<PedidoUpdateWithoutItens_pedidoInput, PedidoUncheckedUpdateWithoutItens_pedidoInput>
    create: XOR<PedidoCreateWithoutItens_pedidoInput, PedidoUncheckedCreateWithoutItens_pedidoInput>
  }

  export type PedidoUpdateWithoutItens_pedidoInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutPedidosNestedInput
    funcionario?: FuncionarioUpdateOneRequiredWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateWithoutItens_pedidoInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    funcionario_id?: IntFieldUpdateOperationsInput | number
  }

  export type Categoria_ProdutoCreateWithoutProdutosInput = {
    nome_categoria: string
  }

  export type Categoria_ProdutoUncheckedCreateWithoutProdutosInput = {
    categoria_id?: number
    nome_categoria: string
  }

  export type Categoria_ProdutoCreateOrConnectWithoutProdutosInput = {
    where: Categoria_ProdutoWhereUniqueInput
    create: XOR<Categoria_ProdutoCreateWithoutProdutosInput, Categoria_ProdutoUncheckedCreateWithoutProdutosInput>
  }

  export type FornecedorCreateWithoutProdutosInput = {
    nome_fornecedor: string
    telefone: string
    email: string
    endereco: string
  }

  export type FornecedorUncheckedCreateWithoutProdutosInput = {
    fornecedor_id?: number
    nome_fornecedor: string
    telefone: string
    email: string
    endereco: string
  }

  export type FornecedorCreateOrConnectWithoutProdutosInput = {
    where: FornecedorWhereUniqueInput
    create: XOR<FornecedorCreateWithoutProdutosInput, FornecedorUncheckedCreateWithoutProdutosInput>
  }

  export type Item_PedidoCreateWithoutProdutoInput = {
    data_pedido: Date | string
    valor_total: number
    pedido: PedidoCreateNestedOneWithoutItens_pedidoInput
  }

  export type Item_PedidoUncheckedCreateWithoutProdutoInput = {
    item_pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    pedido_id: number
  }

  export type Item_PedidoCreateOrConnectWithoutProdutoInput = {
    where: Item_PedidoWhereUniqueInput
    create: XOR<Item_PedidoCreateWithoutProdutoInput, Item_PedidoUncheckedCreateWithoutProdutoInput>
  }

  export type Item_PedidoCreateManyProdutoInputEnvelope = {
    data: Enumerable<Item_PedidoCreateManyProdutoInput>
    skipDuplicates?: boolean
  }

  export type Categoria_ProdutoUpsertWithoutProdutosInput = {
    update: XOR<Categoria_ProdutoUpdateWithoutProdutosInput, Categoria_ProdutoUncheckedUpdateWithoutProdutosInput>
    create: XOR<Categoria_ProdutoCreateWithoutProdutosInput, Categoria_ProdutoUncheckedCreateWithoutProdutosInput>
  }

  export type Categoria_ProdutoUpdateWithoutProdutosInput = {
    nome_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type Categoria_ProdutoUncheckedUpdateWithoutProdutosInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    nome_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type FornecedorUpsertWithoutProdutosInput = {
    update: XOR<FornecedorUpdateWithoutProdutosInput, FornecedorUncheckedUpdateWithoutProdutosInput>
    create: XOR<FornecedorCreateWithoutProdutosInput, FornecedorUncheckedCreateWithoutProdutosInput>
  }

  export type FornecedorUpdateWithoutProdutosInput = {
    nome_fornecedor?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type FornecedorUncheckedUpdateWithoutProdutosInput = {
    fornecedor_id?: IntFieldUpdateOperationsInput | number
    nome_fornecedor?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type Item_PedidoUpsertWithWhereUniqueWithoutProdutoInput = {
    where: Item_PedidoWhereUniqueInput
    update: XOR<Item_PedidoUpdateWithoutProdutoInput, Item_PedidoUncheckedUpdateWithoutProdutoInput>
    create: XOR<Item_PedidoCreateWithoutProdutoInput, Item_PedidoUncheckedCreateWithoutProdutoInput>
  }

  export type Item_PedidoUpdateWithWhereUniqueWithoutProdutoInput = {
    where: Item_PedidoWhereUniqueInput
    data: XOR<Item_PedidoUpdateWithoutProdutoInput, Item_PedidoUncheckedUpdateWithoutProdutoInput>
  }

  export type Item_PedidoUpdateManyWithWhereWithoutProdutoInput = {
    where: Item_PedidoScalarWhereInput
    data: XOR<Item_PedidoUpdateManyMutationInput, Item_PedidoUncheckedUpdateManyWithoutItens_pedidoInput>
  }

  export type ProdutoCreateWithoutFornecedorInput = {
    nome_produto: string
    descricao: string
    preco: number
    categoria: Categoria_ProdutoCreateNestedOneWithoutProdutosInput
    itens_pedido?: Item_PedidoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutFornecedorInput = {
    produto_id?: number
    nome_produto: string
    descricao: string
    preco: number
    categoria_id: number
    itens_pedido?: Item_PedidoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoCreateOrConnectWithoutFornecedorInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutFornecedorInput, ProdutoUncheckedCreateWithoutFornecedorInput>
  }

  export type ProdutoCreateManyFornecedorInputEnvelope = {
    data: Enumerable<ProdutoCreateManyFornecedorInput>
    skipDuplicates?: boolean
  }

  export type ProdutoUpsertWithWhereUniqueWithoutFornecedorInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutFornecedorInput, ProdutoUncheckedUpdateWithoutFornecedorInput>
    create: XOR<ProdutoCreateWithoutFornecedorInput, ProdutoUncheckedCreateWithoutFornecedorInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutFornecedorInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutFornecedorInput, ProdutoUncheckedUpdateWithoutFornecedorInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutFornecedorInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutProdutosInput>
  }

  export type ProdutoScalarWhereInput = {
    AND?: Enumerable<ProdutoScalarWhereInput>
    OR?: Enumerable<ProdutoScalarWhereInput>
    NOT?: Enumerable<ProdutoScalarWhereInput>
    produto_id?: IntFilter | number
    nome_produto?: StringFilter | string
    descricao?: StringFilter | string
    preco?: FloatFilter | number
    categoria_id?: IntFilter | number
    fornecedor_id?: IntFilter | number
  }

  export type ProdutoCreateWithoutCategoriaInput = {
    nome_produto: string
    descricao: string
    preco: number
    fornecedor: FornecedorCreateNestedOneWithoutProdutosInput
    itens_pedido?: Item_PedidoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutCategoriaInput = {
    produto_id?: number
    nome_produto: string
    descricao: string
    preco: number
    fornecedor_id: number
    itens_pedido?: Item_PedidoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoCreateOrConnectWithoutCategoriaInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput>
  }

  export type ProdutoCreateManyCategoriaInputEnvelope = {
    data: Enumerable<ProdutoCreateManyCategoriaInput>
    skipDuplicates?: boolean
  }

  export type ProdutoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutCategoriaInput, ProdutoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutCategoriaInput, ProdutoUncheckedUpdateWithoutCategoriaInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutCategoriaInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutProdutosInput>
  }

  export type PedidoCreateManyFuncionarioInput = {
    pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    cliente_id: number
  }

  export type PedidoUpdateWithoutFuncionarioInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutPedidosNestedInput
    itens_pedido?: Item_PedidoUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateWithoutFuncionarioInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    itens_pedido?: Item_PedidoUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateManyWithoutPedidosInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
  }

  export type PedidoCreateManyClienteInput = {
    pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    funcionario_id: number
  }

  export type PedidoUpdateWithoutClienteInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    funcionario?: FuncionarioUpdateOneRequiredWithoutPedidosNestedInput
    itens_pedido?: Item_PedidoUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateWithoutClienteInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    funcionario_id?: IntFieldUpdateOperationsInput | number
    itens_pedido?: Item_PedidoUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type Item_PedidoCreateManyPedidoInput = {
    item_pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    produto_id: number
  }

  export type Item_PedidoUpdateWithoutPedidoInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    produto?: ProdutoUpdateOneRequiredWithoutItens_pedidoNestedInput
  }

  export type Item_PedidoUncheckedUpdateWithoutPedidoInput = {
    item_pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type Item_PedidoUncheckedUpdateManyWithoutItens_pedidoInput = {
    item_pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type Item_PedidoCreateManyProdutoInput = {
    item_pedido_id?: number
    data_pedido: Date | string
    valor_total: number
    pedido_id: number
  }

  export type Item_PedidoUpdateWithoutProdutoInput = {
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    pedido?: PedidoUpdateOneRequiredWithoutItens_pedidoNestedInput
  }

  export type Item_PedidoUncheckedUpdateWithoutProdutoInput = {
    item_pedido_id?: IntFieldUpdateOperationsInput | number
    data_pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateManyFornecedorInput = {
    produto_id?: number
    nome_produto: string
    descricao: string
    preco: number
    categoria_id: number
  }

  export type ProdutoUpdateWithoutFornecedorInput = {
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria?: Categoria_ProdutoUpdateOneRequiredWithoutProdutosNestedInput
    itens_pedido?: Item_PedidoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutFornecedorInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    itens_pedido?: Item_PedidoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateManyWithoutProdutosInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateManyCategoriaInput = {
    produto_id?: number
    nome_produto: string
    descricao: string
    preco: number
    fornecedor_id: number
  }

  export type ProdutoUpdateWithoutCategoriaInput = {
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    fornecedor?: FornecedorUpdateOneRequiredWithoutProdutosNestedInput
    itens_pedido?: Item_PedidoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutCategoriaInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    nome_produto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    fornecedor_id?: IntFieldUpdateOperationsInput | number
    itens_pedido?: Item_PedidoUncheckedUpdateManyWithoutProdutoNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}