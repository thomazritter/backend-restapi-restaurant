
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.8.0
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.8.0",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Categoria_ProdutoScalarFieldEnum = makeEnum({
  categoria_id: 'categoria_id',
  nome_categoria: 'nome_categoria'
});

exports.Prisma.ClienteScalarFieldEnum = makeEnum({
  cliente_id: 'cliente_id',
  nome: 'nome',
  telefone: 'telefone',
  email: 'email',
  endereco: 'endereco'
});

exports.Prisma.FornecedorScalarFieldEnum = makeEnum({
  fornecedor_id: 'fornecedor_id',
  nome_fornecedor: 'nome_fornecedor',
  telefone: 'telefone',
  email: 'email',
  endereco: 'endereco'
});

exports.Prisma.FuncionarioScalarFieldEnum = makeEnum({
  funcionario_id: 'funcionario_id',
  nome_funcionario: 'nome_funcionario',
  cargo: 'cargo',
  telefone: 'telefone',
  email: 'email',
  endereco: 'endereco'
});

exports.Prisma.Item_PedidoScalarFieldEnum = makeEnum({
  item_pedido_id: 'item_pedido_id',
  data_pedido: 'data_pedido',
  valor_total: 'valor_total',
  produto_id: 'produto_id',
  pedido_id: 'pedido_id'
});

exports.Prisma.PedidoScalarFieldEnum = makeEnum({
  pedido_id: 'pedido_id',
  data_pedido: 'data_pedido',
  valor_total: 'valor_total',
  cliente_id: 'cliente_id',
  funcionario_id: 'funcionario_id'
});

exports.Prisma.ProdutoScalarFieldEnum = makeEnum({
  produto_id: 'produto_id',
  nome_produto: 'nome_produto',
  descricao: 'descricao',
  preco: 'preco',
  categoria_id: 'categoria_id',
  fornecedor_id: 'fornecedor_id'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});


exports.Prisma.ModelName = makeEnum({
  Funcionario: 'Funcionario',
  Cliente: 'Cliente',
  Pedido: 'Pedido',
  Item_Pedido: 'Item_Pedido',
  Produto: 'Produto',
  Fornecedor: 'Fornecedor',
  Categoria_Produto: 'Categoria_Produto'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
